import os
import logging
from datetime import datetime, timedelta
import json
from typing import Dict, List, Optional
import threading
from flask import Flask, request, jsonify
import schedule
import time

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è telebot (pyTelegramBotAPI)
try:
    import telebot
    from telebot import TeleBot
    from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
    logger.info(f"‚úÖ pyTelegramBotAPI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pyTelegramBotAPI: {e}")
    logging.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyTelegramBotAPI==4.14.0")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è Render.com
app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({"status": "Bot is running", "timestamp": datetime.now().isoformat()})

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))

def send_daily_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = list(schedule_manager.schedules.keys())
        
        for user_id in all_users:
            try:
                today_schedule = schedule_manager.get_today_schedule(user_id)
                if "–Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π" not in today_schedule:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    bot.send_message(user_id, today_schedule)
                    logger.info(f"üåÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 8:00
    schedule.every().day.at("08:00").do(send_daily_reminders)
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 8:00")
    
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            time.sleep(60)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
user_states = {}  # user_id -> state

class ScheduleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞—Ç–∞–º"""
    
    def __init__(self):
        self.schedules = {}  # user_id -> {date -> [events]}
        self.load_schedules()
    
    def load_schedules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('schedules.json'):
                with open('schedules.json', 'r', encoding='utf-8') as f:
                    self.schedules = json.load(f)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.schedules)} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
            self.schedules = {}
    
    def save_schedules(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open('schedules.json', 'w', encoding='utf-8') as f:
                json.dump(self.schedules, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
    
    def parse_date(self, date_text: str) -> str:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è' -> '2025-09-02')"""
        try:
            # –¢–µ–∫—É—â–∏–π –≥–æ–¥
            current_year = datetime.now().year
            
            # –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
            months = {
                '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
                '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
            }
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
            parts = date_text.strip().split()
            if len(parts) >= 2:
                day = int(parts[0])
                month_name = parts[1].lower()
                
                if month_name in months:
                    month = months[month_name]
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                    date_obj = datetime(current_year, month, day)
                    return date_obj.strftime('%Y-%m-%d')
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return date_text
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_text}': {e}")
            return date_text
    
    def add_event(self, user_id: int, date_text: str, time_text: str, activity: str, event_type: str = "general") -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if user_id not in self.schedules:
            self.schedules[user_id] = {}
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_key = self.parse_date(date_text)
        
        if date_key not in self.schedules[user_id]:
            self.schedules[user_id][date_key] = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        import uuid
        event_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = {
            'id': event_id,
            'time': time_text.strip(),
            'activity': activity.strip(),
            'type': event_type,
            'added_at': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.schedules[user_id][date_key].append(event)
        self.schedules[user_id][date_key].sort(key=lambda x: x['time'])
        
        self.save_schedules()
        
        return f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date_text} –≤ {time_text}: {activity}"
    
    def get_date_schedule(self, user_id: int, date_text: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if user_id not in self.schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."
        
        date_key = self.parse_date(date_text)
        
        if date_key not in self.schedules[user_id] or not self.schedules[user_id][date_key]:
            return f"üìÖ –ù–∞ {date_text} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        
        events = self.schedules[user_id][date_key]
        
        result = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_text}:\n\n"
        
        for i, event in enumerate(events, 1):
            emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
            result += f"{emoji} {event['time']} - {event['activity']}\n"
        
        return result
    
    def get_week_schedule(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        if user_id not in self.schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."
        
        if not self.schedules[user_id]:
            return "üìÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        
        result = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        sorted_dates = sorted(self.schedules[user_id].keys())
        
        for date_key in sorted_dates:
            events = self.schedules[user_id][date_key]
            if events:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                try:
                    date_obj = datetime.strptime(date_key, '%Y-%m-%d')
                    date_display = date_obj.strftime('%d %B')
                except:
                    date_display = date_key
                
                result += f"üìÖ {date_display}:\n"
                
                for event in events:
                    emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
                    result += f"  {emoji} {event['time']} - {event['activity']}\n"
                
                result += "\n"
        
        return result
    
    def get_today_schedule(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        if user_id not in self.schedules or today not in self.schedules[user_id]:
            return "üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞! üòä"
        
        events = self.schedules[user_id][today]
        if not events:
            return "üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞! üòä"
        
        result = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç —á—Ç–æ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        for i, event in enumerate(events, 1):
            emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
            result += f"{i}. {emoji} {event['time']} - {event['activity']}\n"
        
        result += "\nüí° –°–æ–≤–µ—Ç: –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è —Å –∑–∞–ø–∞—Å–æ–º –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏!"
        return result
    
    def get_user_schedules(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.schedules.get(user_id, {})
    
    def analyze_schedule(self, user_id: int) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç—ã"""
        user_schedules = self.get_user_schedules(user_id)
        
        if not user_schedules['study'] and not user_schedules['work']:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞!"
        
        analysis = "üîç –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        study_count = 0
        work_count = 0
        total_events = 0
        
        for date_key, events in self.schedules[user_id].items():
            for event in events:
                total_events += 1
                if event.get('type') == 'study':
                    study_count += 1
                elif event.get('type') == 'work':
                    work_count += 1
        
        analysis += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        analysis += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}\n"
        analysis += f"‚Ä¢ –£—á–µ–±–Ω—ã—Ö: {study_count}\n"
        analysis += f"‚Ä¢ –†–∞–±–æ—á–∏—Ö: {work_count}\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_stats = {}
        for date_key, events in self.schedules[user_id].items():
            try:
                date_obj = datetime.strptime(date_key, '%Y-%m-%d')
                weekday = date_obj.strftime('%A')  # Monday, Tuesday, etc.
                if weekday not in weekday_stats:
                    weekday_stats[weekday] = 0
                weekday_stats[weekday] += len(events)
            except:
                pass
        
        # –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å
        if weekday_stats:
            busiest_day = max(weekday_stats.items(), key=lambda x: x[1])
            analysis += f"üìÖ –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å: {busiest_day[0]} ({busiest_day[1]} —Å–æ–±—ã—Ç–∏–π)\n\n"
        
        # –°–æ–≤–µ—Ç—ã
        analysis += "üí° –°–æ–≤–µ—Ç—ã:\n"
        if total_events > 15:
            analysis += "‚Ä¢ –£ –≤–∞—Å –æ—á–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
        elif total_events > 10:
            analysis += "‚Ä¢ –•–æ—Ä–æ—à–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö.\n"
        elif total_events > 5:
            analysis += "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
        else:
            analysis += "‚Ä¢ –õ–µ–≥–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å. –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!\n"
        
        if study_count > work_count * 2:
            analysis += "‚Ä¢ –ë–æ–ª—å—à–æ–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —É—á–µ–±–µ - –æ—Ç–ª–∏—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±—É–¥—É—â–µ–µ!\n"
        elif work_count > study_count * 2:
            analysis += "‚Ä¢ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π - –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–∑–≤–∏—Ç–∏–µ!\n"
        
        return analysis

    def get_smart_recommendations(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        if user_id not in self.schedules:
            return "üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤!"
        
        result = "ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò:\n\n"
        
        # –°—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        total_events = sum(len(events) for events in self.schedules[user_id].values())
        study_count = sum(1 for events in self.schedules[user_id].values() 
                         for event in events if event.get('type') == 'study')
        work_count = sum(1 for events in self.schedules[user_id].values() 
                        for event in events if event.get('type') == 'work')
        
        # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_events} —Å–æ–±—ã—Ç–∏–π\n"
        result += f"üìö –£—á–µ–±–∞: {study_count} | üíº –†–∞–±–æ—Ç–∞: {work_count}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if total_events == 0:
            result += "üí° –î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        elif total_events < 5:
            result += "üí° –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π\n"
        elif total_events > 15:
            result += "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π - –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–¥—ã—Ö\n"
        else:
            result += "‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π\n"
        
        # –ë–∞–ª–∞–Ω—Å
        if study_count > work_count * 2:
            result += "üìö –ú–Ω–æ–≥–æ —É—á–µ–±—ã - –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—Ç—É\n"
        elif work_count > study_count * 2:
            result += "üíº –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã - –¥–æ–±–∞–≤—å—Ç–µ —É—á–µ–±—É\n"
        else:
            result += "‚öñÔ∏è –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —É—á–µ–±–∞/—Ä–∞–±–æ—Ç–∞\n"
        
        result += "\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!"
        
        return result

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_manager = ScheduleManager()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω–æ–µ", callback_data="add_study"),
            InlineKeyboardButton("üíº –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ", callback_data="add_work")
        ],
        [
            InlineKeyboardButton("üìä –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="my_schedules"),
            InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑", callback_data="analyze")
        ],
        [
            InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice_input"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" """
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def cmd_start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! üóìÔ∏è

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ üìö –î–æ–±–∞–≤–ª—è—Ç—å —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üíº –î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ  
‚Ä¢ üé§ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üí° –î–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

def cmd_help(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1. **üìö –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω–æ–µ** - –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä, –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –≤—Ä–µ–º–µ–Ω–∏
2. **üíº –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ** - –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏, –¥–µ–¥–ª–∞–π–Ω—ã
3. **üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
4. **üìä –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
5. **üîç –ê–Ω–∞–ª–∏–∑** - –ø–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101"
‚Ä¢ "–í—Ç–æ—Ä–Ω–∏–∫ 14:00 - –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç"
‚Ä¢ "–°—Ä–µ–¥–∞ - –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞, —Å–¥–∞—Ç—å –¥–æ 18:00"

–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –≤—Å–µ –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è! ‚è∞
"""
    
    update.message.reply_text(help_text, reply_markup=get_back_keyboard())

def cmd_ping(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    update.message.reply_text("üèì pong")
    logger.info(f"üèì –ü–∏–Ω–≥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
def add_study_start(update, context):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    update.callback_query.answer()
    update.callback_query.edit_message_text(
        "üìö **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        "‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
        "‚Ä¢ –í—Ä–µ–º—è\n"
        "‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç\n"
        "‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101'",
        reply_markup=get_back_keyboard()
    )
    return WAITING_FOR_STUDY_SCHEDULE

def add_work_start(update, context):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    update.callback_query.answer()
    update.callback_query.edit_message_text(
        "üíº **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        "‚Ä¢ –ó–∞–¥–∞—á–∏\n"
        "‚Ä¢ –í—Å—Ç—Ä–µ—á–∏\n"
        "‚Ä¢ –î–µ–¥–ª–∞–π–Ω—ã\n"
        "‚Ä¢ –í—Ä–µ–º—è\n\n"
        "–ü—Ä–∏–º–µ—Ä: '–í—Ç–æ—Ä–Ω–∏–∫ 14:00 - –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç'",
        reply_markup=get_back_keyboard()
    )
    return WAITING_FOR_WORK_SCHEDULE

def process_study_schedule(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    schedule_text = update.message.text
    
    result = schedule_manager.add_study_schedule(user_id, schedule_text)
    update.message.reply_text(result, reply_markup=get_main_keyboard())
    
    logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    return ConversationHandler.END

def process_work_schedule(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    schedule_text = update.message.text
    
    result = schedule_manager.add_work_schedule(user_id, schedule_text)
    update.message.reply_text(result, reply_markup=get_main_keyboard())
    
    logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    return ConversationHandler.END

def cancel(update, context):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    update.callback_query.answer()
    update.callback_query.edit_message_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def process_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ speech-to-text
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º
    
    await update.message.reply_text(
        "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def process_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = update.effective_user.id
    data = update.callback_query.data
    
    await update.callback_query.answer()
    
    if data == "my_schedules":
        user_schedules = schedule_manager.get_user_schedules(user_id)
        
        if not user_schedules['study'] and not user_schedules['work']:
            await update.callback_query.edit_message_text(
                "üìù **–í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!",
                reply_markup=get_back_keyboard()
            )
        else:
            schedules_text = "üìä **–í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:**\n\n"
            
            if user_schedules['study']:
                schedules_text += "üìö **–£—á–µ–±–Ω–æ–µ:**\n"
                for item in user_schedules['study']:
                    schedules_text += f"‚Ä¢ ID {item['id']}: {item['text']}\n"
                schedules_text += "\n"
            
            if user_schedules['work']:
                schedules_text += "üíº **–†–∞–±–æ—á–µ–µ:**\n"
                for item in user_schedules['work']:
                    schedules_text += f"‚Ä¢ ID {item['id']}: {item['text']}\n"
            
            await update.callback_query.edit_message_text(
                schedules_text,
                reply_markup=get_back_keyboard()
            )
        
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    elif data == "analyze":
        analysis = schedule_manager.analyze_schedule(user_id)
        await update.callback_query.edit_message_text(
            analysis,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    elif data == "voice_input":
        await update.callback_query.edit_message_text(
            "üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
            "–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å, –Ω–æ –≤ –±—É–¥—É—â–µ–º —ç—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")
    
    elif data == "help":
        help_text = """
‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1. **üìö –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω–æ–µ** - –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä, –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –≤—Ä–µ–º–µ–Ω–∏
2. **üíº –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ** - –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏, –¥–µ–¥–ª–∞–π–Ω—ã
3. **üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
4. **üìä –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
5. **üîç –ê–Ω–∞–ª–∏–∑** - –ø–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101"
‚Ä¢ "–í—Ç–æ—Ä–Ω–∏–∫ 14:00 - –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç"
‚Ä¢ "–°—Ä–µ–¥–∞ - –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞, —Å–¥–∞—Ç—å –¥–æ 18:00"

–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –≤—Å–µ –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è! ‚è∞
"""
        await update.callback_query.edit_message_text(
            help_text,
            reply_markup=get_back_keyboard()
        )
    
    elif data == "back_to_main":
        await update.callback_query.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render.com
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("üåê Flask –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("ping", cmd_ping))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.VOICE, process_voice))
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(add_study_start, pattern="^add_study$"),
            CallbackQueryHandler(add_work_start, pattern="^add_work$")
        ],
        states={
            WAITING_FOR_STUDY_SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_study_schedule)],
            WAITING_FOR_WORK_SCHEDULE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_work_schedule)]
        },
        fallbacks=[CallbackQueryHandler(cancel, pattern="^back_to_main$")]
    )
    
    application.add_handler(conv_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(process_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await application.initialize()
        await application.start()
        await application.run_polling()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await application.stop()
        await application.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
