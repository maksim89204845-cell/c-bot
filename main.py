import os
import logging
from datetime import datetime, timedelta
import json
from typing import Dict, List, Optional
import threading
from flask import Flask, request, jsonify
import schedule
import time
import uuid

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è telebot (pyTelegramBotAPI)
try:
    import telebot
    from telebot import TeleBot
    from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
    print("‚úÖ pyTelegramBotAPI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pyTelegramBotAPI: {e}")
    logging.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyTelegramBotAPI==4.14.0")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è Render.com
app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({"status": "Bot is running", "timestamp": datetime.now().isoformat()})

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
user_states = {}  # user_id -> state

class ScheduleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞—Ç–∞–º"""
    
    def __init__(self):
        self.schedules = {}  # user_id -> {date -> [events]}
        self.load_schedules()
    
    def load_schedules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('schedules.json'):
                with open('schedules.json', 'r', encoding='utf-8') as f:
                    self.schedules = json.load(f)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.schedules)} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
            self.schedules = {}
    
    def save_schedules(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open('schedules.json', 'w', encoding='utf-8') as f:
                json.dump(self.schedules, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
    
    def parse_date(self, date_text: str) -> str:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è' -> '2025-09-02')"""
        try:
            # –¢–µ–∫—É—â–∏–π –≥–æ–¥
            current_year = datetime.now().year
            
            # –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
            months = {
                '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
                '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
            }
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
            parts = date_text.strip().split()
            if len(parts) >= 2:
                day = int(parts[0])
                month_name = parts[1].lower()
                
                if month_name in months:
                    month = months[month_name]
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                    date_obj = datetime(current_year, month, day)
                    return date_obj.strftime('%Y-%m-%d')
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return date_text
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_text}': {e}")
            return date_text
    
    def add_event(self, user_id: int, date_text: str, time_text: str, activity: str, event_type: str = "general") -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if user_id not in self.schedules:
            self.schedules[user_id] = {}
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_key = self.parse_date(date_text)
        
        if date_key not in self.schedules[user_id]:
            self.schedules[user_id][date_key] = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        event_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = {
            'id': event_id,
            'time': time_text.strip(),
            'activity': activity.strip(),
            'type': event_type,
            'added_at': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.schedules[user_id][date_key].append(event)
        self.schedules[user_id][date_key].sort(key=lambda x: x['time'])
        
        self.save_schedules()
        
        return f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date_text} –≤ {time_text}: {activity}"
    
    def get_date_schedule(self, user_id: int, date_text: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if user_id not in self.schedules:
            return "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!"
        
        date_key = self.parse_date(date_text)
        
        if date_key not in self.schedules[user_id] or not self.schedules[user_id][date_key]:
            return f"üìÖ –ù–∞ {date_text} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        
        events = self.schedules[user_id][date_key]
        result = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_text}:\n\n"
        
        for i, event in enumerate(events, 1):
            emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
            result += f"{emoji} {event['time']} - {event['activity']}\n"
        
        return result
    
    def get_week_schedule(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        if user_id not in self.schedules or not self.schedules[user_id]:
            return "üìÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        
        result = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        sorted_dates = sorted(self.schedules[user_id].keys())
        
        for date_key in sorted_dates:
            events = self.schedules[user_id][date_key]
            if events:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                try:
                    date_obj = datetime.strptime(date_key, '%Y-%m-%d')
                    date_display = date_obj.strftime('%d %B')
                except:
                    date_display = date_key
                
                result += f"üìÖ {date_display}:\n"
                
                for event in events:
                    emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
                    result += f"  {emoji} {event['time']} - {event['activity']}\n"
                
                result += "\n"
        
        return result
    
    def get_today_schedule(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        if user_id not in self.schedules or today not in self.schedules[user_id]:
            return "üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞! üòä"
        
        events = self.schedules[user_id][today]
        if not events:
            return "üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞! üòä"
        
        result = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç —á—Ç–æ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è:\n\n"
        
        for i, event in enumerate(events, 1):
            emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
            result += f"{i}. {emoji} {event['time']} - {event['activity']}\n"
        
        result += "\nüí° –°–æ–≤–µ—Ç: –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è —Å –∑–∞–ø–∞—Å–æ–º –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏!"
        return result
    
    def get_user_schedules(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.schedules.get(user_id, {})
    
    def analyze_schedule(self, user_id: int) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç—ã"""
        user_schedules = self.get_user_schedules(user_id)
        
        if not user_schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞!"
        
        analysis = "üîç –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        study_count = 0
        work_count = 0
        total_events = 0
        
        for date_key, events in user_schedules.items():
            for event in events:
                total_events += 1
                if event.get('type') == 'study':
                    study_count += 1
                elif event.get('type') == 'work':
                    work_count += 1
        
        analysis += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        analysis += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}\n"
        analysis += f"‚Ä¢ –£—á–µ–±–Ω—ã—Ö: {study_count}\n"
        analysis += f"‚Ä¢ –†–∞–±–æ—á–∏—Ö: {work_count}\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_stats = {}
        for date_key, events in user_schedules.items():
            try:
                date_obj = datetime.strptime(date_key, '%Y-%m-%d')
                weekday = date_obj.strftime('%A')  # Monday, Tuesday, etc.
                if weekday not in weekday_stats:
                    weekday_stats[weekday] = 0
                weekday_stats[weekday] += len(events)
            except:
                pass
        
        # –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å
        if weekday_stats:
            busiest_day = max(weekday_stats.items(), key=lambda x: x[1])
            analysis += f"üìÖ –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å: {busiest_day[0]} ({busiest_day[1]} —Å–æ–±—ã—Ç–∏–π)\n\n"
        
        # –°–æ–≤–µ—Ç—ã
        analysis += "üí° –°–æ–≤–µ—Ç—ã:\n"
        if total_events > 15:
            analysis += "‚Ä¢ –£ –≤–∞—Å –æ—á–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
        elif total_events > 10:
            analysis += "‚Ä¢ –•–æ—Ä–æ—à–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö.\n"
        elif total_events > 5:
            analysis += "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
        else:
            analysis += "‚Ä¢ –õ–µ–≥–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å. –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!\n"
        
        if study_count > work_count * 2:
            analysis += "‚Ä¢ –ë–æ–ª—å—à–æ–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —É—á–µ–±–µ - –æ—Ç–ª–∏—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±—É–¥—É—â–µ–µ!\n"
        elif work_count > study_count * 2:
            analysis += "‚Ä¢ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π - –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–∑–≤–∏—Ç–∏–µ!\n"
        
        return analysis
    
    def get_smart_recommendations(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        if user_id not in self.schedules:
            return "üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n–î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤!"
        
        result = "ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò:\n\n"
        
        # –°—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        total_events = sum(len(events) for events in self.schedules[user_id].values())
        study_count = sum(1 for events in self.schedules[user_id].values() 
                         for event in events if event.get('type') == 'study')
        work_count = sum(1 for events in self.schedules[user_id].values() 
                        for event in events if event.get('type') == 'work')
        
        # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_events} —Å–æ–±—ã—Ç–∏–π\n"
        result += f"üìö –£—á–µ–±–∞: {study_count} | üíº –†–∞–±–æ—Ç–∞: {work_count}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if total_events == 0:
            result += "üí° –î–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        elif total_events < 5:
            result += "üí° –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π\n"
        elif total_events > 15:
            result += "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏–π - –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç–¥—ã—Ö\n"
        else:
            result += "‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π\n"
        
        # –ë–∞–ª–∞–Ω—Å
        if study_count > work_count * 2:
            result += "üìö –ú–Ω–æ–≥–æ —É—á–µ–±—ã - –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—Ç—É\n"
        elif work_count > study_count * 2:
            result += "üíº –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã - –¥–æ–±–∞–≤—å—Ç–µ —É—á–µ–±—É\n"
        else:
            result += "‚öñÔ∏è –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —É—á–µ–±–∞/—Ä–∞–±–æ—Ç–∞\n"
        
        result += "\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!"
        
        return result
    
    def get_smart_work_schedule(self, user_id: int, current_communications: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –¥–µ–∫–∞–¥—É
            now = datetime.now()
            current_month = now.month
            current_day = now.day
            
            # –¶–µ–ª–∏
            monthly_goal = 1000
            decade_goal = 300
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–∫–∞–¥—É (1-10, 11-20, 21-31)
            if current_day <= 10:
                decade = 1
                decade_start = 1
                decade_end = 10
            elif current_day <= 20:
                decade = 2
                decade_start = 11
                decade_end = 20
            else:
                decade = 3
                decade_start = 21
                decade_end = 31
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
            days_in_month = (now.replace(month=now.month % 12 + 1, day=1) - timedelta(days=1)).day
            remaining_days_in_month = days_in_month - current_day + 1
            remaining_days_in_decade = decade_end - current_day + 1
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
            remaining_monthly = monthly_goal - current_communications
            remaining_decade = decade_goal - current_communications
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫—Ä–∏—Ç–∏—á–Ω—É—é —Ü–µ–ª—å
            if remaining_decade > 0:
                target_communications = remaining_decade
                target_period = f"–¥–µ–∫–∞–¥—É (–¥–æ {decade_end} —á–∏—Å–ª–∞)"
                target_days = remaining_days_in_decade
            else:
                target_communications = remaining_monthly
                target_period = f"–º–µ—Å—è—Ü (–¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞)"
                target_days = remaining_days_in_month
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å–º–µ–Ω—ã
            auto_plan = self.auto_plan_work_shift(user_id, target_communications)
            
            result = f"ü§ñ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n\n"
            result += f"üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_communications} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n"
            result += f"üéØ –¶–µ–ª—å –Ω–∞ {target_period}: {target_communications} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n"
            result += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {target_days}\n"
            result += f"üìà –ù—É–∂–Ω–æ –≤ –¥–µ–Ω—å: {target_communications / target_days:.1f}\n\n"
            
            result += f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω:\n{auto_plan}"
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
    
    def auto_plan_work_shift(self, user_id: int, target_communications: int) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é —Å–º–µ–Ω—É"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            available_slots = []
            
            for i in range(7):
                check_date = (datetime.now() + timedelta(days=i)).strftime('%Y-%m-%d')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
                existing_events = self.schedules.get(user_id, {}).get(check_date, [])
                
                # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ 4-—á–∞—Å–æ–≤—ã–µ —Å–ª–æ—Ç—ã
                for hour in range(9, 18):  # 9:00 - 18:00
                    slot_start = f"{hour:02d}:00"
                    slot_end = f"{hour + 4:02d}:00"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                    conflict = False
                    for event in existing_events:
                        event_start = event.get('time', '').split('-')[0].strip()
                        event_end = event.get('time', '').split('-')[-1].strip()
                        
                        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                        if (slot_start < event_end and slot_end > event_start):
                            conflict = True
                            break
                    
                    if not conflict:
                        available_slots.append({
                            'date': check_date,
                            'start': slot_start,
                            'end': slot_end,
                            'day_name': (datetime.now() + timedelta(days=i)).strftime('%A')
                        })
            
            if not available_slots:
                return "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π"
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å–ª–æ—Ç (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –∑–∞—Ç–µ–º –ø–æ –¥–Ω—è–º)
            best_slot = available_slots[0]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (13 –≤ —á–∞—Å)
            hours = 4
            possible_communications = int(hours * 13)
            
            result = f"üìÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å–º–µ–Ω–∞:\n"
            result += f"‚Ä¢ –î–∞—Ç–∞: {best_slot['day_name']} ({best_slot['date']})\n"
            result += f"‚Ä¢ –í—Ä–µ–º—è: {best_slot['start']} - {best_slot['end']}\n"
            result += f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours} —á–∞—Å–∞\n"
            result += f"‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: {possible_communications}\n"
            result += f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏: {possible_communications / target_communications * 100:.1f}%\n\n"
            
            if possible_communications >= target_communications:
                result += "‚úÖ –≠—Ç–∞ —Å–º–µ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏!"
            else:
                result += f"‚ö†Ô∏è –ù—É–∂–Ω–æ –µ—â–µ {target_communications - possible_communications} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
    
    def _add_hours(self, time_str: str, hours: float) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —á–∞—Å—ã –∫ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            time_obj = datetime.strptime(time_str, '%H:%M')
            new_time = time_obj + timedelta(hours=hours)
            return new_time.strftime('%H:%M')
        except:
            return time_str

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_manager = ScheduleManager()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_menu"),
            InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å", callback_data="show_menu")
        ],
        [
            InlineKeyboardButton("ü§ñ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="ai_planner"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_add_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("üìö –£—á–µ–±–∞", callback_data="add_study"),
            InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞", callback_data="add_work")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_show_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –ù–∞ –¥–∞—Ç—É", callback_data="show_date"),
            InlineKeyboardButton("üìä –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="show_week")
        ],
        [
            InlineKeyboardButton("üåÖ –°–µ–≥–æ–¥–Ω—è", callback_data="show_today"),
            InlineKeyboardButton("ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="smart_recommendations")
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" """
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def cmd_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! üóìÔ∏è

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ üìö –î–æ–±–∞–≤–ª—è—Ç—å —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üíº –î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ  
‚Ä¢ ü§ñ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    bot.reply_to(message, welcome_text, reply_markup=get_main_keyboard())
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@bot.message_handler(commands=['help'])
def cmd_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

‚ûï –î–æ–±–∞–≤–∏—Ç—å:
‚Ä¢ üìö –£—á–µ–±–∞ - –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
‚Ä¢ üíº –†–∞–±–æ—Ç–∞ - –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

üìÖ –ü–æ–∫–∞–∑–∞—Ç—å:
‚Ä¢ üìÖ –ù–∞ –¥–∞—Ç—É - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
‚Ä¢ üìä –ù–∞ –Ω–µ–¥–µ–ª—é - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
‚Ä¢ üåÖ –°–µ–≥–æ–¥–Ω—è - —á—Ç–æ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

ü§ñ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ: –¢–ï–ö–£–©–ò–ô_–ü–†–û–ì–†–ï–°–°
‚Ä¢ –ü—Ä–∏–º–µ—Ä: 250
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø–ª–∞–Ω

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏

–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:
‚Ä¢ "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:35"
‚Ä¢ "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º 3 —Å–µ–Ω—Ç—è–±—Ä—è 14:00-15:00"
‚Ä¢ "250" (–¥–ª—è –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
"""
    
    bot.reply_to(message, help_text, reply_markup=get_main_keyboard())

@bot.message_handler(commands=['recommendations'])
def cmd_recommendations(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommendations"""
    user_id = message.from_user.id
    recommendations = schedule_manager.get_smart_recommendations(user_id)
    bot.reply_to(message, recommendations, reply_markup=get_main_keyboard())

@bot.message_handler(commands=['ai_plan'])
def cmd_ai_plan(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai_plan"""
    user_id = message.from_user.id
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split()[1:]
    if len(args) < 1:
        bot.reply_to(message, 
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ai_plan –¢–ï–ö–£–©–ò–ô_–ü–†–û–ì–†–ï–°–°\n"
            "–ü—Ä–∏–º–µ—Ä: /ai_plan 250",
            reply_markup=get_main_keyboard())
        return
    
    try:
        current_communications = int(args[0])
        if current_communications < 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    except ValueError:
        bot.reply_to(message, 
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π.\n"
            "–ü—Ä–∏–º–µ—Ä: /ai_plan 250",
            reply_markup=get_main_keyboard())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    smart_schedule = schedule_manager.get_smart_work_schedule(user_id, current_communications)
    bot.reply_to(message, smart_schedule, reply_markup=get_main_keyboard())
    
    logger.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {current_communications}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    if user_id not in user_states:
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        return
    
    state = user_states[user_id]
    
    if state.startswith("waiting_for_study_subject_"):
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            state_parts = state.split('_', 4)
            if len(state_parts) >= 5:
                date_text = state_parts[3]
                time_text = state_parts[4]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                result = schedule_manager.add_event(user_id, date_text, time_text, text, "study")
                bot.reply_to(message, result, reply_markup=get_main_keyboard())
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del user_states[user_id]
                logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —É—á–µ–±–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {text}")
            else:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
    
    elif state.startswith("waiting_for_work_description_"):
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        try:
            state_parts = state.split('_', 4)
            if len(state_parts) >= 5:
                date_text = state_parts[3]
                time_text = state_parts[4]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                result = schedule_manager.add_event(user_id, date_text, time_text, text, "work")
                bot.reply_to(message, result, reply_markup=get_main_keyboard())
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del user_states[user_id]
                logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Ä–∞–±–æ—á–µ–µ —Å–æ–±—ã—Ç–∏–µ: {text}")
            else:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
    
    elif state == "waiting_for_ai_plan":
        try:
            current_communications = int(text)
            if current_communications < 0:
                raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            smart_schedule = schedule_manager.get_smart_work_schedule(user_id, current_communications)
            bot.reply_to(message, smart_schedule, reply_markup=get_main_keyboard())
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del user_states[user_id]
            logger.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {current_communications}")
            
        except ValueError:
            bot.reply_to(message, 
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π.\n"
                "–ü—Ä–∏–º–µ—Ä: 250",
                reply_markup=get_main_keyboard())
    
    else:
        bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def process_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = call.from_user.id
    data = call.data
    
    bot.answer_callback_query(call.id)
    
    if data == "add_menu":
        bot.edit_message_text(
            "‚ûï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_add_menu_keyboard()
        )
        logger.info(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
    
    elif data == "show_menu":
        bot.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_show_menu_keyboard()
        )
        logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    elif data == "add_study":
        bot.edit_message_text(
            "üìö –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:35\n\n"
            "–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        user_states[user_id] = "waiting_for_study_datetime"
        logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è")
    
    elif data == "add_work":
        bot.edit_message_text(
            "üíº –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Å–æ–±—ã—Ç–∏—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "2 —Å–µ–Ω—Ç—è–±—Ä—è 14:00-15:00\n\n"
            "–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        user_states[user_id] = "waiting_for_work_datetime"
        logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Å–æ–±—ã—Ç–∏—è")
    
    elif data == "show_date":
        bot.edit_message_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "2 —Å–µ–Ω—Ç—è–±—Ä—è\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        user_states[user_id] = "waiting_for_date"
    
    elif data == "waiting_for_study_datetime":
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        try:
            parts = text.split()
            if len(parts) >= 3:
                day = parts[0]
                month = parts[1]
                time_range = parts[2]
                
                date_text = f"{day} {month}"
                time_text = time_range
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
                user_states[user_id] = f"waiting_for_study_subject_{date_text}_{time_text}"
                
                bot.edit_message_text(
                    f"üìö –û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞: {date_text}, –í—Ä–µ–º—è: {time_text}\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=get_back_keyboard()
                )
            else:
                bot.edit_message_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:35",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=get_back_keyboard()
                )
        except Exception as e:
            bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=get_back_keyboard()
            )
    
    elif data == "waiting_for_work_datetime":
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        try:
            parts = text.split()
            if len(parts) >= 3:
                day = parts[0]
                month = parts[1]
                time_range = parts[2]
                
                date_text = f"{day} {month}"
                time_text = time_range
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
                user_states[user_id] = f"waiting_for_work_description_{date_text}_{time_text}"
                
                bot.edit_message_text(
                    f"üíº –û—Ç–ª–∏—á–Ω–æ! –î–∞—Ç–∞: {date_text}, –í—Ä–µ–º—è: {time_text}\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=get_back_keyboard()
                )
            else:
                bot.edit_message_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 2 —Å–µ–Ω—Ç—è–±—Ä—è 14:00-15:00",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=get_back_keyboard()
                )
        except Exception as e:
            bot.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=get_back_keyboard()
                )
    
    elif data == "show_week":
        schedule_text = schedule_manager.get_week_schedule(user_id)
        bot.edit_message_text(
            schedule_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    
    elif data == "show_today":
        schedule_text = schedule_manager.get_today_schedule(user_id)
        bot.edit_message_text(
            schedule_text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üåÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    
    elif data == "smart_recommendations":
        recommendations = schedule_manager.get_smart_recommendations(user_id)
        bot.edit_message_text(
            recommendations,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    elif data == "ai_planner":
        bot.edit_message_text(
            "ü§ñ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π:\n"
            "–ü—Ä–∏–º–µ—Ä: 250\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç:\n"
            "‚Ä¢ –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ü–µ–ª–∏\n"
            "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        user_states[user_id] = "waiting_for_ai_plan"
        logger.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
    
    elif data == "statistics":
        analysis = schedule_manager.analyze_schedule(user_id)
        bot.edit_message_text(
            analysis,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    elif data == "back_to_main":
        bot.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=get_main_keyboard()
        )
        logger.info(f"üè† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

def send_daily_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = list(schedule_manager.schedules.keys())
        
        for user_id in all_users:
            try:
                today_schedule = schedule_manager.get_today_schedule(user_id)
                if "–Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π" not in today_schedule:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    bot.send_message(user_id, today_schedule)
                    logger.info(f"üåÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 8:00
    schedule.every().day.at("08:00").do(send_daily_reminders)
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 8:00")
    
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            time.sleep(60)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render.com
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("üåê Flask –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.polling(none_stop=True, interval=0)
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        bot.stop_polling()

if __name__ == '__main__':
    main()
