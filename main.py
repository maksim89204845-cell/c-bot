import os
import logging
from datetime import datetime, timedelta
import json
from typing import Dict, List, Optional
import threading
from flask import Flask, request, jsonify
import schedule
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è telebot (pyTelegramBotAPI)
try:
    import telebot
    from telebot import TeleBot
    from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
    logger.info(f"‚úÖ pyTelegramBotAPI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pyTelegramBotAPI: {e}")
    logging.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyTelegramBotAPI==4.14.0")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è Render.com
app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({"status": "Bot is running", "timestamp": datetime.now().isoformat()})

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))

def send_daily_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = list(schedule_manager.schedules.keys())
        
        for user_id in all_users:
            try:
                today_schedule = schedule_manager.get_today_schedule(user_id)
                if "–Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π" not in today_schedule:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    bot.send_message(user_id, today_schedule)
                    logger.info(f"üåÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 8:00
    schedule.every().day.at("08:00").do(send_daily_reminders)
    
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 8:00")
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
user_states = {}  # user_id -> state

class ScheduleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞—Ç–∞–º"""
    
    def __init__(self):
        self.schedules = {}  # user_id -> {date -> [events]}
        self.load_schedules()
    
    def load_schedules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('schedules.json'):
                with open('schedules.json', 'r', encoding='utf-8') as f:
                    self.schedules = json.load(f)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.schedules)} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
            self.schedules = {}
    
    def save_schedules(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open('schedules.json', 'w', encoding='utf-8') as f:
                json.dump(self.schedules, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
    
    def parse_date(self, date_text: str) -> str:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è' -> '2025-09-02')"""
        try:
            # –¢–µ–∫—É—â–∏–π –≥–æ–¥
            current_year = datetime.now().year
            
            # –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
            months = {
                '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
                '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
            }
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
            parts = date_text.strip().split()
            if len(parts) >= 2:
                day = int(parts[0])
                month_name = parts[1].lower()
                
                if month_name in months:
                    month = months[month_name]
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                    date_obj = datetime(current_year, month, day)
                    return date_obj.strftime('%Y-%m-%d')
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return date_text
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_text}': {e}")
            return date_text
    
    def add_event(self, user_id: int, date_text: str, time_text: str, activity: str, event_type: str = "general") -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if user_id not in self.schedules:
            self.schedules[user_id] = {}
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_key = self.parse_date(date_text)
        
        if date_key not in self.schedules[user_id]:
            self.schedules[user_id][date_key] = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        import uuid
        event_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = {
            'id': event_id,
            'time': time_text.strip(),
            'activity': activity.strip(),
            'type': event_type,
            'added_at': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.schedules[user_id][date_key].append(event)
        self.schedules[user_id][date_key].sort(key=lambda x: x['time'])
        
        self.save_schedules()
        
        return f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date_text} –≤ {time_text}: {activity}\nüÜî ID: {event_id}"
    
    def get_date_schedule(self, user_id: int, date_text: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if user_id not in self.schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."
        
        date_key = self.parse_date(date_text)
        
        if date_key not in self.schedules[user_id] or not self.schedules[user_id][date_key]:
            return f"üìÖ –ù–∞ {date_text} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        
        events = self.schedules[user_id][date_key]
        
        result = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_text}:**\n\n"
        
        for i, event in enumerate(events, 1):
            emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
            result += f"{emoji} **{event['time']}** - {event['activity']} [ID: {event['id']}]\n"
        
        return result
    
    def get_week_schedule(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        if user_id not in self.schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."
        
        if not self.schedules[user_id]:
            return "üìÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        
        result = "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:**\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        sorted_dates = sorted(self.schedules[user_id].keys())
        
        for date_key in sorted_dates:
            events = self.schedules[user_id][date_key]
            if events:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                try:
                    date_obj = datetime.strptime(date_key, '%Y-%m-%d')
                    date_display = date_obj.strftime('%d %B')
                except:
                    date_display = date_key
                
                result += f"üìÖ **{date_display}:**\n"
                
                for event in events:
                    emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
                    result += f"  {emoji} **{event['time']}** - {event['activity']} [ID: {event['id']}]\n"
                
                result += "\n"
        
        return result
    
    def clear_date(self, user_id: int, date_text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if user_id not in self.schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π."
        
        date_key = self.parse_date(date_text)
        
        if date_key not in self.schedules[user_id]:
            return f"üìÖ –ù–∞ {date_text} —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        
        events_count = len(self.schedules[user_id][date_key])
        del self.schedules[user_id][date_key]
        self.save_schedules()
        
        return f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ {events_count} —Å–æ–±—ã—Ç–∏–π –Ω–∞ {date_text}"
    
    def get_user_schedules(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.schedules.get(user_id, {})
    
    def analyze_schedule(self, user_id: int) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç—ã"""
        user_schedules = self.get_user_schedules(user_id)
        
        if not user_schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞!"
        
        analysis = "üîç **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:**\n\n"
        
        total_events = sum(len(events) for events in user_schedules.values())
        total_days = len(user_schedules)
        
        analysis += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        analysis += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}\n"
        analysis += f"‚Ä¢ –î–Ω–µ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: {total_days}\n"
        analysis += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å: {total_events/total_days:.1f}\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        study_count = sum(1 for events in user_schedules.values() 
                         for event in events if event.get('type') == 'study')
        work_count = sum(1 for events in user_schedules.values() 
                        for event in events if event.get('type') == 'work')
        
        if study_count > 0:
            analysis += f"üìö **–£—á–µ–±–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:** {study_count}\n"
        if work_count > 0:
            analysis += f"üíº **–†–∞–±–æ—á–∏–µ —Å–æ–±—ã—Ç–∏—è:** {work_count}\n"
        
        # –°–æ–≤–µ—Ç—ã
        analysis += "\nüí° **–°–æ–≤–µ—Ç—ã:**\n"
        if total_events > 10:
            analysis += "‚Ä¢ –£ –≤–∞—Å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö.\n"
        if study_count > work_count:
            analysis += "‚Ä¢ –ë–æ–ª—å—à–µ —É—á–µ–±–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π - –æ—Ç–ª–∏—á–Ω–∞—è —É—á–µ–±–∞!\n"
        if work_count > study_count:
            analysis += "‚Ä¢ –ë–æ–ª—å—à–µ —Ä–∞–±–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π - –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n"
        
        return analysis
    
    def get_event_by_id(self, user_id: int, event_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID"""
        if user_id not in self.schedules:
            return None
        
        for date_key, events in self.schedules[user_id].items():
            for event in events:
                if event.get('id') == event_id:
                    return {'event': event, 'date_key': date_key}
        return None
    
    def edit_event(self, user_id: int, event_id: str, field: str, new_value: str) -> str:
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        event_info = self.get_event_by_id(user_id, event_id)
        if not event_info:
            return "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        
        event = event_info['event']
        date_key = event_info['date_key']
        
        if field == 'time':
            event['time'] = new_value
            # –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            self.schedules[user_id][date_key].sort(key=lambda x: x['time'])
            message = f"‚úÖ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_value}"
        elif field == 'description':
            event['activity'] = new_value
            message = f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_value}"
        elif field == 'date':
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É
            new_date_key = self.parse_date(new_value)
            if new_date_key != date_key:
                # –£–¥–∞–ª—è–µ–º —Å —Å—Ç–∞—Ä–æ–π –¥–∞—Ç—ã
                self.schedules[user_id][date_key].remove(event)
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É
                if new_date_key not in self.schedules[user_id]:
                    self.schedules[user_id][new_date_key] = []
                self.schedules[user_id][new_date_key].append(event)
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                self.schedules[user_id][new_date_key].sort(key=lambda x: x['time'])
                message = f"‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –Ω–∞: {new_value}"
            else:
                message = "‚ÑπÔ∏è –î–∞—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å"
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
        
        self.save_schedules()
        return message
    
    def get_today_schedule(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().strftime('%Y-%m-%d')
        
        if user_id not in self.schedules or today not in self.schedules[user_id]:
            return "üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞! üòä"
        
        events = self.schedules[user_id][today]
        if not events:
            return "üìÖ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞! üòä"
        
        result = "üåÖ **–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–æ—Ç —á—Ç–æ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è:**\n\n"
        
        for i, event in enumerate(events, 1):
            emoji = "üìö" if event['type'] == 'study' else "üíº" if event['type'] == 'work' else "üìù"
            result += f"{i}. {emoji} **{event['time']}** - {event['activity']}\n"
        
        result += "\nüí° **–°–æ–≤–µ—Ç:** –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è —Å –∑–∞–ø–∞—Å–æ–º –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏!"
        return result
    
    def get_statistics(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_schedules = self.get_user_schedules(user_id)
        
        if not user_schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        
        total_events = sum(len(events) for events in user_schedules.values())
        total_days = len(user_schedules)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        study_count = sum(1 for events in user_schedules.values() 
                         for event in events if event.get('type') == 'study')
        work_count = sum(1 for events in user_schedules.values() 
                        for event in events if event.get('type') == 'work')
        general_count = total_events - study_count - work_count
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_stats = {}
        for date_key, events in user_schedules.items():
            try:
                date_obj = datetime.strptime(date_key, '%Y-%m-%d')
                weekday = date_obj.strftime('%A')  # Monday, Tuesday, etc.
                if weekday not in weekday_stats:
                    weekday_stats[weekday] = 0
                weekday_stats[weekday] += len(events)
            except:
                pass
        
        # –°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å
        busiest_day = max(weekday_stats.items(), key=lambda x: x[1]) if weekday_stats else None
        
        result = "üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:**\n\n"
        
        result += f"üìà **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        result += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {total_events}\n"
        result += f"‚Ä¢ –î–Ω–µ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: {total_days}\n"
        result += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–π –≤ –¥–µ–Ω—å: {total_events/total_days:.1f}\n\n"
        
        result += f"üè∑Ô∏è **–ü–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π:**\n"
        result += f"‚Ä¢ üìö –£—á–µ–±–Ω—ã–µ: {study_count} ({study_count/total_events*100:.1f}%)\n"
        result += f"‚Ä¢ üíº –†–∞–±–æ—á–∏–µ: {work_count} ({work_count/total_events*100:.1f}%)\n"
        result += f"‚Ä¢ üìù –û–±—â–∏–µ: {general_count} ({general_count/total_events*100:.1f}%)\n\n"
        
        if busiest_day:
            result += f"üìÖ **–°–∞–º—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–µ–Ω—å:** {busiest_day[0]} ({busiest_day[1]} —Å–æ–±—ã—Ç–∏–π)\n\n"
        
        result += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        if total_events > 15:
            result += "‚Ä¢ –£ –≤–∞—Å –æ—á–µ–Ω—å –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
        elif total_events > 10:
            result += "‚Ä¢ –•–æ—Ä–æ—à–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö.\n"
        elif total_events > 5:
            result += "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
        else:
            result += "‚Ä¢ –õ–µ–≥–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å. –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤!\n"
        
        if study_count > work_count * 2:
            result += "‚Ä¢ –ë–æ–ª—å—à–æ–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —É—á–µ–±–µ - –æ—Ç–ª–∏—á–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±—É–¥—É—â–µ–µ!\n"
        elif work_count > study_count * 2:
            result += "‚Ä¢ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π - –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–∑–≤–∏—Ç–∏–µ!\n"
        
        return result
    
    def add_work_session(self, user_id: int, date_text: str, time_text: str, communications: int, session_type: str = "support") -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"""
        if user_id not in self.schedules:
            self.schedules[user_id] = {}
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_key = self.parse_date(date_text)
        
        if date_key not in self.schedules[user_id]:
            self.schedules[user_id][date_key] = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        import uuid
        session_id = str(uuid.uuid4())[:8]
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é
        work_session = {
            'id': session_id,
            'time': time_text.strip(),
            'type': 'work_session',
            'communications': communications,
            'session_type': session_type,
            'productivity': communications / self._parse_hours(time_text) if self._parse_hours(time_text) > 0 else 0,
            'added_at': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        self.schedules[user_id][date_key].append(work_session)
        self.schedules[user_id][date_key].sort(key=lambda x: x['time'])
        
        self.save_schedules()
        
        return f"‚úÖ –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {date_text} –≤ {time_text}\nüìä –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π: {communications}\nüÜî ID: {session_id}"
    
    def _parse_hours(self, time_text: str) -> float:
        """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        try:
            # –§–æ—Ä–º–∞—Ç: "09:00-17:00" –∏–ª–∏ "9:00-17:00"
            parts = time_text.split('-')
            if len(parts) == 2:
                start_time = datetime.strptime(parts[0].strip(), '%H:%M')
                end_time = datetime.strptime(parts[1].strip(), '%H:%M')
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å
                duration = end_time - start_time
                hours = duration.total_seconds() / 3600
                return max(hours, 0.1)  # –ú–∏–Ω–∏–º—É–º 0.1 —á–∞—Å–∞
        except:
            pass
        return 1.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
    
    def get_work_statistics(self, user_id: int, period: str = "month") -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–±–æ—Ç–µ"""
        if user_id not in self.schedules:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        today = datetime.now()
        if period == "decade":
            # –¢–µ–∫—É—â–∞—è –¥–µ–∫–∞–¥–∞ (1-10, 11-20, 21-31)
            day = today.day
            if day <= 10:
                start_date = today.replace(day=1)
                end_date = today.replace(day=10)
            elif day <= 20:
                start_date = today.replace(day=11)
                end_date = today.replace(day=20)
            else:
                start_date = today.replace(day=21)
                end_date = today.replace(day=31)
        elif period == "month":
            start_date = today.replace(day=1)
            end_date = today.replace(day=31)
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'decade' –∏–ª–∏ 'month'"
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_communications = 0
        total_hours = 0
        sessions_count = 0
        
        for date_key, events in self.schedules[user_id].items():
            try:
                date_obj = datetime.strptime(date_key, '%Y-%m-%d')
                if start_date <= date_obj <= end_date:
                    for event in events:
                        if event.get('type') == 'work_session':
                            total_communications += event.get('communications', 0)
                            total_hours += self._parse_hours(event.get('time', '1:00'))
                            sessions_count += 1
            except:
                pass
        
        if sessions_count == 0:
            return f"üìä –ó–∞ {period} —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π."
        
        # –¶–µ–ª–∏
        monthly_goal = 1000
        decade_goal = 300
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        avg_productivity = total_communications / total_hours if total_hours > 0 else 0
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        if period == "month":
            days_in_month = 31
            days_passed = min(today.day, days_in_month)
            progress_percent = (days_passed / days_in_month) * 100
            
            if progress_percent > 0:
                projected_monthly = (total_communications / progress_percent) * 100
            else:
                projected_monthly = 0
        else:
            projected_monthly = 0
        
        result = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∑–∞ {period}:**\n\n"
        result += f"üìà **–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        result += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π: {total_communications}\n"
        result += f"‚Ä¢ –†–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π: {sessions_count}\n"
        result += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours:.1f} —á–∞—Å–æ–≤\n"
        result += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_productivity:.1f} –∫–æ–º–º/—á–∞—Å\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–π
        if period == "decade":
            result += f"üéØ **–¶–µ–ª—å –¥–µ–∫–∞–¥—ã:** {decade_goal} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n"
            if total_communications >= decade_goal:
                result += f"‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!\n"
            else:
                remaining = decade_goal - total_communications
                result += f"üìù –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n"
        elif period == "month":
            result += f"üéØ **–¶–µ–ª—å –º–µ—Å—è—Ü–∞:** {monthly_goal} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n"
            if total_communications >= monthly_goal:
                result += f"‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –í—ã –º–æ–ª–æ–¥–µ—Ü!\n"
            else:
                remaining = monthly_goal - total_communications
                result += f"üìù –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n"
            
            if projected_monthly > 0:
                result += f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: {projected_monthly:.0f} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        result += "\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        if avg_productivity > 15:
            result += "‚Ä¢ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö.\n"
        elif avg_productivity < 10:
            result += "‚Ä¢ –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ–º–ø, –Ω–æ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π—Ç–µ.\n"
        else:
            result += "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–º–ø.\n"
        
        if total_hours > 160:  # 8 —á–∞—Å–æ–≤ * 20 –¥–Ω–µ–π
            result += "‚Ä¢ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤! –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –æ—Ç–¥—ã—Ö.\n"
        
        return result
    
    def get_smart_work_schedule(self, user_id: int, target_communications: int, date_text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        if user_id not in self.schedules:
            self.schedules[user_id] = {}
        
        date_key = self.parse_date(date_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        study_events = []
        if date_key in self.schedules[user_id]:
            study_events = [event for event in self.schedules[user_id][date_key] if event.get('type') == 'study']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        target_hours = target_communications / 13  # 13 –∫–æ–º–º/—á–∞—Å
        available_hours = 8  # –ú–∞–∫—Å–∏–º—É–º 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —É—á–µ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        study_hours = 0
        for event in study_events:
            study_hours += self._parse_hours(event.get('time', '1:00'))
        
        available_hours -= study_hours
        
        if available_hours < target_hours:
            result = f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ù–∞ {date_text} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            result += f"üìö –£—á–µ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: {study_hours:.1f} —á–∞—Å–æ–≤\n"
            result += f"‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã: {available_hours:.1f} —á–∞—Å–æ–≤\n"
            result += f"üìä –ù—É–∂–Ω–æ –¥–ª—è {target_communications} –∫–æ–º–º: {target_hours:.1f} —á–∞—Å–æ–≤\n\n"
            result += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            result += f"‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å\n"
            result += f"‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ {target_communications/available_hours:.1f} –∫–æ–º–º/—á–∞—Å\n"
            result += f"‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —É—á–µ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è\n"
        else:
            result = f"‚úÖ **–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_text}:**\n\n"
            result += f"üìö –£—á–µ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: {study_hours:.1f} —á–∞—Å–æ–≤\n"
            result += f"üíº –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {target_hours:.1f} —á–∞—Å–æ–≤\n"
            result += f"‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ: {available_hours:.1f} —á–∞—Å–æ–≤\n\n"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
            if study_events:
                result += f"üìÖ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫:**\n"
                for i, event in enumerate(study_events, 1):
                    result += f"{i}. {event['time']} - {event['activity']}\n"
                result += f"\nüíº **–†–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏:**\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞ —Å–µ—Å—Å–∏–∏
            sessions = self._split_work_sessions(target_hours, study_events)
            for i, session in enumerate(sessions, 1):
                result += f"{i}. {session['time']} - {session['communications']} –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n"
            
            result += f"\nüí° **–°–æ–≤–µ—Ç—ã:**\n"
            result += f"‚Ä¢ –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞\n"
            result += f"‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
            result += f"‚Ä¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏\n"
        
        return result
    
    def _split_work_sessions(self, total_hours: float, study_events: list) -> list:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        sessions = []
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: 2-3 —á–∞—Å–∞
        if total_hours <= 2:
            sessions.append({
                'time': '09:00-11:00',
                'communications': int(total_hours * 13)
            })
        elif total_hours <= 4:
            sessions.extend([
                {'time': '09:00-11:00', 'communications': 26},
                {'time': '14:00-16:00', 'communications': int((total_hours - 2) * 13)}
            ])
        else:
            sessions.extend([
                {'time': '09:00-11:00', 'communications': 26},
                {'time': '14:00-16:00', 'communications': 26},
                {'time': '16:30-18:30', 'communications': int((total_hours - 4) * 13)}
            ])
        
        return sessions

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_manager = ScheduleManager()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(BOT_TOKEN)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event"),
        InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É", callback_data="show_date")
    )
    keyboard.add(
        InlineKeyboardButton("üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="show_week"),
        InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑", callback_data="analyze")
    )
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_event"),
        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
    )
    keyboard.add(
        InlineKeyboardButton("üíº –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è", callback_data="add_work_session"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã", callback_data="work_stats")
    )
    keyboard.add(
        InlineKeyboardButton("ü§ñ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", callback_data="ai_planner"),
        InlineKeyboardButton("üìö –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="smart_reminders")
    )
    keyboard.add(
        InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞—Ç—É", callback_data="clear_date"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    )
    return keyboard

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" """
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! üóìÔ∏èü§ñ

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
‚Ä¢ üìÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É/–Ω–µ–¥–µ–ª—é
‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
‚Ä¢ üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üíº –†–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏ –¢-–ú–æ–±–∞–π–ª —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
‚Ä¢ ü§ñ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —É—á–µ–±—ã
‚Ä¢ üìö –ü–æ—à–∞–≥–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üí° –£–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

**–¶–µ–ª–∏ —Ä–∞–±–æ—Ç—ã –¢-–ú–æ–±–∞–π–ª:**
üéØ –ú–µ—Å—è—Ü: 1000 –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
üéØ –î–µ–∫–∞–¥–∞: 300 –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 13 –∫–æ–º–º/—á–∞—Å

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ "2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è"
‚Ä¢ "2 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-17:00 104" (—Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è)
‚Ä¢ "/ai_plan 100 2 —Å–µ–Ω—Ç—è–±—Ä—è" (–ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    bot.reply_to(message, welcome_text, reply_markup=get_main_keyboard())
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@bot.message_handler(commands=['help'])
def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1. **‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ** - –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
2. **üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É** - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
3. **üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é** - –æ–±–∑–æ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é
4. **üîç –ê–Ω–∞–ª–∏–∑** - –ø–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
5. **‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å** - –∏–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
6. **üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
7. **üíº –†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è** - –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
8. **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã** - –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã –ø–æ –¥–µ–∫–∞–¥–∞–º –∏ –º–µ—Å—è—Ü–∞–º
9. **ü§ñ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫** - —É–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —É—á–µ—Ç–æ–º —É—á–µ–±—ã
10. **üìö –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** - –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±—ã –∏ —Ä–∞–±–æ—Ç—ã
11. **üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞—Ç—É** - —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/add` - –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ `/show` - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
‚Ä¢ `/today` - —á—Ç–æ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ `/work_stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã (–∑–∞ –º–µ—Å—è—Ü –∏–ª–∏ –¥–µ–∫–∞–¥—É)
‚Ä¢ `/ai_plan –ö–û–õ–ò–ß–ï–°–¢–í–û_–ö–û–ú–ú –î–ê–¢–ê` - –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç—ã
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:**
–î–∞—Ç–∞ –í—Ä–µ–º—è –û–ø–∏—Å–∞–Ω–∏–µ

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è"
‚Ä¢ "3 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-10:30 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101"
‚Ä¢ "4 —Å–µ–Ω—Ç—è–±—Ä—è 16:30-17:00 –†–∞–±–æ—Ç–∞ –≤ –¢-–ú–æ–±–∞–π–ª"

**–†–∞–±–æ—á–∏–µ —Å–µ—Å—Å–∏–∏ (–¢-–ú–æ–±–∞–π–ª):**
–î–∞—Ç–∞ –í—Ä–µ–º—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "2 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-17:00 104"
‚Ä¢ "3 —Å–µ–Ω—Ç—è–±—Ä—è 14:00-18:00 52"

**–ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:**
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –î–∞—Ç–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "100 2 —Å–µ–Ω—Ç—è–±—Ä—è"
‚Ä¢ "150 5 —Å–µ–Ω—Ç—è–±—Ä—è"

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ "–≤—Ä–µ–º—è 14:00-15:30" - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è
‚Ä¢ "–æ–ø–∏—Å–∞–Ω–∏–µ –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞" - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ "–¥–∞—Ç–∞ 5 —Å–µ–Ω—Ç—è–±—Ä—è" - –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É

**–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:**
‚Ä¢ "2 —Å–µ–Ω—Ç—è–±—Ä—è" (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∫–∞–∫ 2025-09-02)
‚Ä¢ "15 –æ–∫—Ç—è–±—Ä—è"
‚Ä¢ "3 –Ω–æ—è–±—Ä—è"

**–¶–µ–ª–∏ —Ä–∞–±–æ—Ç—ã –¢-–ú–æ–±–∞–π–ª:**
‚Ä¢ üéØ –ú–µ—Å—è—Ü: 1000 –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
‚Ä¢ üéØ –î–µ–∫–∞–¥–∞: 300 –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
‚Ä¢ üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 13 –∫–æ–º–º/—á–∞—Å

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π! ‚è∞üöÄ
"""
    
    bot.reply_to(message, help_text, reply_markup=get_back_keyboard())

@bot.message_handler(commands=['ping'])
def cmd_ping(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    bot.reply_to(message, "üèì pong")
    logger.info(f"üèì –ü–∏–Ω–≥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@bot.message_handler(commands=['add'])
def cmd_add(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add - –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    user_id = message.from_user.id
    user_states[user_id] = 'waiting_for_event'
    
    bot.reply_to(
        message,
        "‚ûï **–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–∞—Ç–∞ –í—Ä–µ–º—è –û–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è\n"
        "‚Ä¢ 3 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-10:30 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101\n"
        "‚Ä¢ 4 —Å–µ–Ω—Ç—è–±—Ä—è 16:30-17:00 –†–∞–±–æ—Ç–∞ –≤ –¢-–ú–æ–±–∞–π–ª",
        reply_markup=get_back_keyboard()
    )
    logger.info(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /add")

@bot.message_handler(commands=['show'])
def cmd_show(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    user_id = message.from_user.id
    result = schedule_manager.get_week_schedule(user_id)
    
    bot.reply_to(message, result, reply_markup=get_main_keyboard())
    logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /show")

@bot.message_handler(commands=['today'])
def cmd_today(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = message.from_user.id
    result = schedule_manager.get_today_schedule(user_id)
    
    bot.reply_to(message, result, reply_markup=get_main_keyboard())
    logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /today")

@bot.message_handler(commands=['work_stats'])
def cmd_work_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /work_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"""
    user_id = message.from_user.id
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    period = "month"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü
    
    if len(args) > 1:
        if args[1].lower() in ['decade', '–¥–µ–∫–∞–¥–∞']:
            period = "decade"
        elif args[1].lower() in ['month', '–º–µ—Å—è—Ü']:
            period = "month"
    
    result = schedule_manager.get_work_statistics(user_id, period)
    bot.reply_to(message, result, reply_markup=get_main_keyboard())
    logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∑–∞ {period}")

@bot.message_handler(commands=['ai_plan'])
def cmd_ai_plan(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai_plan - –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    user_id = message.from_user.id
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /ai_plan 100 2 —Å–µ–Ω—Ç—è–±—Ä—è
    args = message.text.split()
    if len(args) >= 3:
        try:
            target_communications = int(args[1])
            date_text = " ".join(args[2:])
            result = schedule_manager.get_smart_work_schedule(user_id, target_communications, date_text)
            bot.reply_to(message, result, reply_markup=get_main_keyboard())
            logger.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è {target_communications} –∫–æ–º–º –Ω–∞ {date_text}")
        except ValueError:
            bot.reply_to(
                message,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/ai_plan –ö–û–õ–ò–ß–ï–°–¢–í–û_–ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ô –î–ê–¢–ê\n\n"
                "–ü—Ä–∏–º–µ—Ä: /ai_plan 100 2 —Å–µ–Ω—Ç—è–±—Ä—è",
                reply_markup=get_main_keyboard()
            )
    else:
        bot.reply_to(
            message,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/ai_plan –ö–û–õ–ò–ß–ï–°–¢–í–û_–ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ô –î–ê–¢–ê\n\n"
            "–ü—Ä–∏–º–µ—Ä: /ai_plan 100 2 —Å–µ–Ω—Ç—è–±—Ä—è",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['voice'])
def process_voice(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    bot.reply_to(
        message,
        "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–∞—Ç–∞ –í—Ä–µ–º—è –û–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è'",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: True)
def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    if user_id in user_states:
        state = user_states[user_id]
        
        if state == 'waiting_for_event':
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è"
            try:
                parts = message.text.strip().split()
                if len(parts) >= 4:
                    # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å—Ç–∏ - –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2 —Å–µ–Ω—Ç—è–±—Ä—è")
                    date_part = f"{parts[0]} {parts[1]}"
                    # 3-—è —á–∞—Å—Ç—å - –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "13:55-15:50")
                    time_part = parts[2]
                    # –û—Å—Ç–∞–ª—å–Ω–æ–µ - –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    activity_part = " ".join(parts[3:])
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                    event_type = "general"
                    if any(word in activity_part.lower() for word in ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–∏—Å—Ç–æ—Ä–∏—è', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', '—Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è', '–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è']):
                        event_type = "study"
                    elif any(word in activity_part.lower() for word in ['—Ä–∞–±–æ—Ç–∞', '–≤—Å—Ç—Ä–µ—á–∞', '–∑–≤–æ–Ω–æ–∫', '–¥–µ–¥–ª–∞–π–Ω', 'deadline']):
                        event_type = "work"
                    
                    result = schedule_manager.add_event(user_id, date_part, time_part, activity_part, event_type)
                    bot.reply_to(message, result, reply_markup=get_main_keyboard())
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Å–æ–±—ã—Ç–∏–µ: {date_part} {time_part} {activity_part}")
                else:
                    bot.reply_to(message, 
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "–î–∞—Ç–∞ –í—Ä–µ–º—è –û–ø–∏—Å–∞–Ω–∏–µ\n\n"
                        "–ü—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è'",
                        reply_markup=get_main_keyboard())
                    logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {message.text}")
                    return
            except Exception as e:
                bot.reply_to(message, 
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "–î–∞—Ç–∞ –í—Ä–µ–º—è –û–ø–∏—Å–∞–Ω–∏–µ\n\n"
                    "–ü—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è'",
                    reply_markup=get_main_keyboard())
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
                return
            finally:
                del user_states[user_id]
            
        elif state == 'waiting_for_date':
            result = schedule_manager.get_date_schedule(user_id, message.text)
            bot.reply_to(message, result, reply_markup=get_main_keyboard())
            del user_states[user_id]
            logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}")
            
        elif state == 'waiting_for_clear_date':
            result = schedule_manager.clear_date(user_id, message.text)
            bot.reply_to(message, result, reply_markup=get_main_keyboard())
            del user_states[user_id]
            logger.info(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}")
            
        elif state == 'waiting_for_event_id':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            event_info = schedule_manager.get_event_by_id(user_id, message.text)
            if event_info:
                event = event_info['event']
                user_states[user_id] = f'editing_{message.text}'
                
                bot.reply_to(
                    message,
                    f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:**\n\n"
                    f"üìÖ **{event['time']}** - {event['activity']}\n"
                    f"üè∑Ô∏è –¢–∏–ø: {event['type']}\n\n"
                    f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
                    f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ '–≤—Ä–µ–º—è –ù–û–í–û–ï_–í–†–ï–ú–Ø' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤—Ä–µ–º—è 14:00-15:30)\n"
                    f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ '–æ–ø–∏—Å–∞–Ω–∏–µ –ù–û–í–û–ï_–û–ü–ò–°–ê–ù–ò–ï' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–ø–∏—Å–∞–Ω–∏–µ –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞)\n"
                    f"‚Ä¢ –í–≤–µ–¥–∏—Ç–µ '–¥–∞—Ç–∞ –ù–û–í–ê–Ø_–î–ê–¢–ê' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–∞—Ç–∞ 5 —Å–µ–Ω—Ç—è–±—Ä—è)",
                    reply_markup=get_back_keyboard()
                )
                logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {message.text}")
            else:
                bot.reply_to(
                    message,
                    "‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /show",
                    reply_markup=get_main_keyboard()
                )
                del user_states[user_id]
                logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π ID: {message.text}")
            
        elif state.startswith('editing_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
            event_id = state.split('_')[1]
            parts = message.text.strip().split(' ', 1)
            
            if len(parts) >= 2:
                field = parts[0].lower()
                new_value = parts[1]
                
                if field in ['–≤—Ä–µ–º—è', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–¥–∞—Ç–∞']:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
                    field_map = {'–≤—Ä–µ–º—è': 'time', '–æ–ø–∏—Å–∞–Ω–∏–µ': 'description', '–¥–∞—Ç–∞': 'date'}
                    result = schedule_manager.edit_event(user_id, event_id, field_map[field], new_value)
                    bot.reply_to(message, result, reply_markup=get_main_keyboard())
                    logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª {field} —Å–æ–±—ã—Ç–∏—è {event_id}")
                else:
                    bot.reply_to(
                        message,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "‚Ä¢ –≤—Ä–µ–º—è –ù–û–í–û–ï_–í–†–ï–ú–Ø\n"
                        "‚Ä¢ –æ–ø–∏—Å–∞–Ω–∏–µ –ù–û–í–û–ï_–û–ü–ò–°–ê–ù–ò–ï\n"
                        "‚Ä¢ –¥–∞—Ç–∞ –ù–û–í–ê–Ø_–î–ê–¢–ê",
                        reply_markup=get_main_keyboard()
                    )
            else:
                bot.reply_to(
                    message,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    "‚Ä¢ –≤—Ä–µ–º—è –ù–û–í–û–ï_–í–†–ï–ú–Ø\n"
                    "‚Ä¢ –æ–ø–∏—Å–∞–Ω–∏–µ –ù–û–í–û–ï_–û–ü–ò–°–ê–ù–ò–ï\n"
                    "‚Ä¢ –¥–∞—Ç–∞ –ù–û–í–ê–Ø_–î–ê–¢–ê",
                    reply_markup=get_main_keyboard()
                )
            
            del user_states[user_id]
            
        elif state == 'waiting_for_work_session':
            # –ü–∞—Ä—Å–∏–º —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é: "2 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-17:00 104"
            try:
                parts = message.text.strip().split()
                if len(parts) >= 4:
                    # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å—Ç–∏ - –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2 —Å–µ–Ω—Ç—è–±—Ä—è")
                    date_part = f"{parts[0]} {parts[1]}"
                    # 3-—è —á–∞—Å—Ç—å - –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "09:00-17:00")
                    time_part = parts[2]
                    # 4-—è —á–∞—Å—Ç—å - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
                    communications = int(parts[3])
                    
                    result = schedule_manager.add_work_session(user_id, date_part, time_part, communications)
                    bot.reply_to(message, result, reply_markup=get_main_keyboard())
                    logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é: {date_part} {time_part} {communications} –∫–æ–º–º")
                else:
                    bot.reply_to(message, 
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "–î–∞—Ç–∞ –í—Ä–µ–º—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n\n"
                        "–ü—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-17:00 104'",
                        reply_markup=get_main_keyboard())
                    logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏: {message.text}")
                    return
            except ValueError:
                bot.reply_to(message, 
                    "‚ùå –û—à–∏–±–∫–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
                    "–ü—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-17:00 104'",
                    reply_markup=get_main_keyboard())
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")
                return
            except Exception as e:
                bot.reply_to(message, 
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "–î–∞—Ç–∞ –í—Ä–µ–º—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n\n"
                    "–ü—Ä–∏–º–µ—Ä: '2 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-17:00 104'",
                    reply_markup=get_main_keyboard())
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
                return
            finally:
                del user_states[user_id]
            
        elif state == 'waiting_for_ai_plan':
            # –ü–∞—Ä—Å–∏–º –ò–ò-–ø–ª–∞–Ω: "100 2 —Å–µ–Ω—Ç—è–±—Ä—è"
            try:
                parts = message.text.strip().split()
                if len(parts) >= 2:
                    target_communications = int(parts[0])
                    date_text = " ".join(parts[1:])
                    
                    result = schedule_manager.get_smart_work_schedule(user_id, target_communications, date_text)
                    bot.reply_to(message, result, reply_markup=get_main_keyboard())
                    logger.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è {target_communications} –∫–æ–º–º –Ω–∞ {date_text}")
                else:
                    bot.reply_to(message, 
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –î–∞—Ç–∞\n\n"
                        "–ü—Ä–∏–º–µ—Ä: '100 2 —Å–µ–Ω—Ç—è–±—Ä—è'",
                        reply_markup=get_main_keyboard())
                    logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {message.text}")
                    return
            except ValueError:
                bot.reply_to(message, 
                    "‚ùå –û—à–∏–±–∫–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n"
                    "–ü—Ä–∏–º–µ—Ä: '100 2 —Å–µ–Ω—Ç—è–±—Ä—è'",
                    reply_markup=get_main_keyboard())
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")
                return
            except Exception as e:
                bot.reply_to(message, 
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –î–∞—Ç–∞\n\n"
                    "–ü—Ä–∏–º–µ—Ä: '100 2 —Å–µ–Ω—Ç—è–±—Ä—è'",
                    reply_markup=get_main_keyboard())
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
                return
            finally:
                del user_states[user_id]
            
        elif state == 'waiting_for_study_date':
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
            user_states[user_id] = f'waiting_for_study_time_{message.text}'
            bot.reply_to(
                message,
                f"üìö **–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è**\n\n"
                f"–î–∞—Ç–∞: {message.text}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"‚Ä¢ 09:00-10:30\n"
                f"‚Ä¢ 14:00-15:30\n"
                f"‚Ä¢ 16:00-17:00",
                reply_markup=get_back_keyboard()
            )
            logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –¥–∞—Ç—É –¥–ª—è —É—á–µ–±—ã: {message.text}")
            
        elif state.startswith('waiting_for_study_time_'):
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º—è, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            date_text = state.split('_', 3)[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states[user_id] = f'waiting_for_study_subject_{date_text}_{message.text}'
            bot.reply_to(
                message,
                f"üìö **–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞**\n\n"
                f"–î–∞—Ç–∞: {date_text}\n"
                f"–í—Ä–µ–º—è: {message.text}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
                f"‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101\n"
                f"‚Ä¢ –§–∏–∑–∏–∫–∞, –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
                f"‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
                reply_markup=get_back_keyboard()
            )
            logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≤—Ä–µ–º—è –¥–ª—è —É—á–µ–±—ã: {message.text}")
            
        elif state.startswith('waiting_for_study_subject_'):
            # –®–∞–≥ 3: –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            parts = state.split('_', 3)[3:]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            if len(parts) >= 2:
                date_text = parts[0]
                time_text = parts[1]
                subject = message.text
                
                result = schedule_manager.add_event(user_id, date_text, time_text, subject, "study")
                bot.reply_to(message, result, reply_markup=get_main_keyboard())
                logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —É—á–µ–±–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {date_text} {time_text} {subject}")
            else:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
            
            del user_states[user_id]
            
        elif state == 'waiting_for_work_date':
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
            user_states[user_id] = f'waiting_for_work_time_{message.text}'
            bot.reply_to(
                message,
                f"üíº **–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è**\n\n"
                f"–î–∞—Ç–∞: {message.text}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"‚Ä¢ 09:00-17:00\n"
                f"‚Ä¢ 14:00-18:00\n"
                f"‚Ä¢ 10:00-16:00",
                reply_markup=get_back_keyboard()
            )
            logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –¥–∞—Ç—É –¥–ª—è —Ä–∞–±–æ—Ç—ã: {message.text}")
            
        elif state.startswith('waiting_for_work_time_'):
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º—è, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            date_text = state.split('_', 3)[3]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states[user_id] = f'waiting_for_work_description_{date_text}_{message.text}'
            bot.reply_to(
                message,
                f"üíº **–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã**\n\n"
                f"–î–∞—Ç–∞: {date_text}\n"
                f"–í—Ä–µ–º—è: {message.text}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:\n"
                f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¢-–ú–æ–±–∞–π–ª\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫\n"
                f"‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º",
                reply_markup=get_back_keyboard()
            )
            logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã: {message.text}")
            
        elif state.startswith('waiting_for_work_description_'):
            # –®–∞–≥ 3: –ü–æ–ª—É—á–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            parts = state.split('_', 3)[3:]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            if len(parts) >= 2:
                date_text = parts[0]
                time_text = parts[1]
                description = message.text
                
                result = schedule_manager.add_event(user_id, date_text, time_text, description, "work")
                bot.reply_to(message, result, reply_markup=get_main_keyboard())
                logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Ä–∞–±–æ—á–µ–µ —Å–æ–±—ã—Ç–∏–µ: {date_text} {time_text} {description}")
            else:
                bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())
            
            del user_states[user_id]
            
        else:
            del user_states[user_id]
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def process_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = call.from_user.id
    data = call.data
    
    bot.answer_callback_query(call.id)
    
    if data == "add_event":
        user_states[user_id] = 'waiting_for_event'
        bot.edit_message_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–î–∞—Ç–∞ –í—Ä–µ–º—è –û–ø–∏—Å–∞–Ω–∏–µ\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è\n"
            "‚Ä¢ 3 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-10:30 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101\n"
            "‚Ä¢ 4 —Å–µ–Ω—Ç—è–±—Ä—è 16:30-17:00 –†–∞–±–æ—Ç–∞ –≤ –¢-–ú–æ–±–∞–π–ª\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (—É—á–µ–±–Ω–æ–µ/—Ä–∞–±–æ—á–µ–µ)",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    
    elif data == "show_date":
        user_states[user_id] = 'waiting_for_date'
        bot.edit_message_text(
            "üìÖ **–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ 2 —Å–µ–Ω—Ç—è–±—Ä—è\n"
            "‚Ä¢ 15 –æ–∫—Ç—è–±—Ä—è\n"
            "‚Ä¢ 3 –Ω–æ—è–±—Ä—è\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É")
    
    elif data == "show_week":
        result = schedule_manager.get_week_schedule(user_id)
        bot.edit_message_text(
            result,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
    
    elif data == "clear_date":
        user_states[user_id] = 'waiting_for_clear_date'
        bot.edit_message_text(
            "üóëÔ∏è **–û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å:\n"
            "‚Ä¢ 2 —Å–µ–Ω—Ç—è–±—Ä—è\n"
            "‚Ä¢ 15 –æ–∫—Ç—è–±—Ä—è\n"
            "‚Ä¢ 3 –Ω–æ—è–±—Ä—è\n\n"
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –æ—á–∏—Å—Ç–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É")
    
    elif data == "edit_event":
        user_states[user_id] = 'waiting_for_event_id'
        bot.edit_message_text(
            "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:\n"
            "ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: a1b2c3d4)\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /show –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    
    elif data == "statistics":
        result = schedule_manager.get_statistics(user_id)
        bot.edit_message_text(
            result,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    elif data == "add_work_session":
        user_states[user_id] = 'waiting_for_work_session'
        bot.edit_message_text(
            "üíº **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–î–∞—Ç–∞ –í—Ä–µ–º—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 2 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-17:00 104\n"
            "‚Ä¢ 3 —Å–µ–Ω—Ç—è–±—Ä—è 14:00-18:00 52\n"
            "‚Ä¢ 4 —Å–µ–Ω—Ç—è–±—Ä—è 10:00-16:00 78\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏")
    
    elif data == "work_stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üìä –ó–∞ –¥–µ–∫–∞–¥—É", callback_data="stats_decade"),
            InlineKeyboardButton("üìä –ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month")
        )
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        bot.edit_message_text(
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard
        )
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã")
    
    elif data == "ai_planner":
        user_states[user_id] = 'waiting_for_ai_plan'
        bot.edit_message_text(
            "ü§ñ **–ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç—ã**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –î–∞—Ç–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 100 2 —Å–µ–Ω—Ç—è–±—Ä—è\n"
            "‚Ä¢ 150 5 —Å–µ–Ω—Ç—è–±—Ä—è\n"
            "‚Ä¢ 80 10 —Å–µ–Ω—Ç—è–±—Ä—è\n\n"
            "–ò–ò —É—á—Ç–µ—Ç –≤–∞—à–µ —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
    
    elif data == "smart_reminders":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±—É", callback_data="add_study_guided"),
            InlineKeyboardButton("üíº –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="add_work_guided")
        )
        keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
        
        bot.edit_message_text(
            "üìö **–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboard
        )
        logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    
    elif data == "stats_decade":
        result = schedule_manager.get_work_statistics(user_id, "decade")
        bot.edit_message_text(
            result,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–∫–∞–¥—É")
    
    elif data == "stats_month":
        result = schedule_manager.get_work_statistics(user_id, "month")
        bot.edit_message_text(
            result,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü")
    
    elif data == "add_study_guided":
        user_states[user_id] = 'waiting_for_study_date'
        bot.edit_message_text(
            "üìö **–ü–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±—ã**\n\n"
            "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 2 —Å–µ–Ω—Ç—è–±—Ä—è\n"
            "‚Ä¢ 15 –æ–∫—Ç—è–±—Ä—è\n"
            "‚Ä¢ 3 –Ω–æ—è–±—Ä—è",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±—ã")
    
    elif data == "add_work_guided":
        user_states[user_id] = 'waiting_for_work_date'
        bot.edit_message_text(
            "üíº **–ü–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã**\n\n"
            "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 2 —Å–µ–Ω—Ç—è–±—Ä—è\n"
            "‚Ä¢ 15 –æ–∫—Ç—è–±—Ä—è\n"
            "‚Ä¢ 3 –Ω–æ—è–±—Ä—è",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    
    elif data == "analyze":
        analysis = schedule_manager.analyze_schedule(user_id)
        bot.edit_message_text(
            analysis,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    elif data == "help":
        help_text = """
‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1. **‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ** - –¥–æ–±–∞–≤—å—Ç–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
2. **üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É** - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
3. **üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é** - –æ–±–∑–æ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é
4. **üîç –ê–Ω–∞–ª–∏–∑** - –ø–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
5. **‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å** - –∏–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
6. **üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
7. **üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞—Ç—É** - —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/add` - –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
‚Ä¢ `/show` - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
‚Ä¢ `/today` - —á—Ç–æ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è
‚Ä¢ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:**
–î–∞—Ç–∞ –í—Ä–µ–º—è –û–ø–∏—Å–∞–Ω–∏–µ

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "2 —Å–µ–Ω—Ç—è–±—Ä—è 13:55-15:50 –†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è –∏ –∞–±–∏–ª–∏—Ç–∞—Ü–∏—è"
‚Ä¢ "3 —Å–µ–Ω—Ç—è–±—Ä—è 09:00-10:30 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101"
‚Ä¢ "4 —Å–µ–Ω—Ç—è–±—Ä—è 16:30-17:00 –†–∞–±–æ—Ç–∞ –≤ –¢-–ú–æ–±–∞–π–ª"

**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**
‚Ä¢ "–≤—Ä–µ–º—è 14:00-15:30" - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è
‚Ä¢ "–æ–ø–∏—Å–∞–Ω–∏–µ –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞" - –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ "–¥–∞—Ç–∞ 5 —Å–µ–Ω—Ç—è–±—Ä—è" - –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É

**–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:**
‚Ä¢ "2 —Å–µ–Ω—Ç—è–±—Ä—è" (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∫–∞–∫ 2025-09-02)
‚Ä¢ "15 –æ–∫—Ç—è–±—Ä—è"
‚Ä¢ "3 –Ω–æ—è–±—Ä—è"

–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (—É—á–µ–±–Ω–æ–µ/—Ä–∞–±–æ—á–µ–µ) –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏! ‚è∞
"""
        bot.edit_message_text(
            help_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
    
    elif data == "back_to_main":
        bot.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_main_keyboard()
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render.com
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("üåê Flask –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        bot.stop_polling()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
