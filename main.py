import os
import asyncio
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from schedule_parser import ScheduleParser
from datetime import datetime, timedelta
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
GOOGLE_DRIVE_URL = "https://drive.google.com/file/d/152JZ6IMxa07Z1oIjzv7NLhm1LhQUynzP/view?usp=sharing"
schedule_parser = ScheduleParser(GOOGLE_DRIVE_URL)

# ========================================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú
# ========================================

@dp.message(Command("start"))
async def send_welcome(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–ª–ª–µ–¥–∂–∞! üéì

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/schedule_tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞  
/schedule_week - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
/update_schedule - –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

üë• –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: 302–§
üîÑ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    
    await message.reply(welcome_text)

@dp.message(Command("ping"))
async def send_pong(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    await message.reply("pong üèì")

@dp.message(Command("schedule"))
async def send_today_schedule(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        today = datetime.now().strftime('%d.%m.%Y')
        schedule = schedule_parser.get_schedule_for_date(today)
        
        if schedule and any(lesson.get('subject') for lesson in schedule.values()):
            message_text = schedule_parser.format_schedule_message(schedule, today)
        else:
            message_text = f"üìÖ –ù–∞ {today} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å."
        
        await message.reply(message_text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /schedule: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

@dp.message(Command("schedule_tomorrow"))
async def send_tomorrow_schedule(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    try:
        schedule = schedule_parser.get_schedule_for_tomorrow()
        
        if schedule and any(lesson.get('subject') for lesson in schedule.values()):
            tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
            message_text = schedule_parser.format_schedule_message(schedule, tomorrow)
        else:
            message_text = "üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å."
        
        await message.reply(message_text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /schedule_tomorrow: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

@dp.message(Command("schedule_week"))
async def send_week_schedule(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        logging.info("=== –ù–ê–ß–ê–õ–û –ö–û–ú–ê–ù–î–´ /schedule_week ===")
        await message.reply("üîÑ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
        
        logging.info("–í—ã–∑—ã–≤–∞—é get_schedule_for_week()...")
        schedule = schedule_parser.get_schedule_for_week()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        has_lessons = False
        for day_schedule in schedule.values():
            if any(lesson.get('subject') for lesson in day_schedule.values()):
                has_lessons = True
                break
        
        if schedule and has_lessons:
            logging.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = schedule_parser.format_week_schedule_messages(schedule)
            logging.info(f"–°–æ–∑–¥–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            for i, msg in enumerate(messages):
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {i+1} –∏–∑ {len(messages)}")
                try:
                    if i == 0:
                        await message.reply(f"{msg}\n\nüìã –ß–∞—Å—Ç—å {i+1} –∏–∑ {len(messages)}")
                    else:
                        await message.reply(f"{msg}\n\nüìã –ß–∞—Å—Ç—å {i+1} –∏–∑ {len(messages)}")
                    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {str(e)}")
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}")
        else:
            logging.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
            await message.reply("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—É—Å—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /update_schedule")
        
        logging.info("=== –ö–û–ù–ï–¶ –ö–û–ú–ê–ù–î–´ /schedule_week ===")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /schedule_week: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

@dp.message(Command("update_schedule"))
async def update_schedule(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        await message.reply("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        
        if schedule_parser.update_schedule():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
            schedule = schedule_parser.get_schedule_for_week()
            has_lessons = any(
                any(lesson.get('subject') for lesson in day_schedule.values())
                for day_schedule in schedule.values()
            )
            
            if has_lessons:
                await message.reply("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /schedule, /schedule_tomorrow, /schedule_week")
            else:
                await message.reply("‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ —É—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º PDF.")
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /update_schedule: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

# ========================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú
# ========================================
# –ù–∞–ø—Ä–∏–º–µ—Ä:
# /schedule_group - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
# /schedule_teacher - –Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
# /schedule_room - –Ω–∞–π—Ç–∏ –∑–∞–Ω—è—Ç–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
# ========================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()
        logging.info("üåê Flask –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logging.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
