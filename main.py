import os
import logging
from datetime import datetime, timedelta
import json
from typing import Dict, List, Optional
import threading
from flask import Flask, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è telebot (pyTelegramBotAPI)
try:
    import telebot
    from telebot import TeleBot
    from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
    logger.info(f"‚úÖ pyTelegramBotAPI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pyTelegramBotAPI: {e}")
    logging.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyTelegramBotAPI==4.14.0")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è Render.com
app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({"status": "Bot is running", "timestamp": datetime.now().isoformat()})

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
user_states = {}  # user_id -> state

class ScheduleManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.schedules = {}  # user_id -> schedule_data
        self.load_schedules()
    
    def load_schedules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('schedules.json'):
                with open('schedules.json', 'r', encoding='utf-8') as f:
                    self.schedules = json.load(f)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.schedules)} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
            self.schedules = {}
    
    def save_schedules(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            with open('schedules.json', 'w', encoding='utf-8') as f:
                json.dump(self.schedules, f, ensure_ascii=False, indent=2)
            logger.info("üíæ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
    
    def add_study_schedule(self, user_id: int, schedule_text: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        if user_id not in self.schedules:
            self.schedules[user_id] = {'study': [], 'work': []}
        
        schedule_item = {
            'id': len(self.schedules[user_id]['study']) + 1,
            'text': schedule_text,
            'added_at': datetime.now().isoformat(),
            'type': 'study'
        }
        
        self.schedules[user_id]['study'].append(schedule_item)
        self.save_schedules()
        
        return f"‚úÖ –£—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ID: {schedule_item['id']}"
    
    def add_work_schedule(self, user_id: int, schedule_text: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        if user_id not in self.schedules:
            self.schedules[user_id] = {'study': [], 'work': []}
        
        schedule_item = {
            'id': len(self.schedules[user_id]['work']) + 1,
            'text': schedule_text,
            'added_at': datetime.now().isoformat(),
            'type': 'work'
        }
        
        self.schedules[user_id]['work'].append(schedule_item)
        self.save_schedules()
        
        return f"‚úÖ –†–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ID: {schedule_item['id']}"
    
    def get_user_schedules(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.schedules.get(user_id, {'study': [], 'work': []})
    
    def analyze_schedule(self, user_id: int) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞–µ—Ç —Å–æ–≤–µ—Ç—ã"""
        user_schedules = self.get_user_schedules(user_id)
        
        if not user_schedules['study'] and not user_schedules['work']:
            return "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞!"
        
        analysis = "üîç **–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:**\n\n"
        
        # –ê–Ω–∞–ª–∏–∑ —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if user_schedules['study']:
            study_count = len(user_schedules['study'])
            analysis += f"üìö **–£—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** {study_count} –∑–∞–ø–∏—Å–µ–π\n"
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            study_text = " ".join([item['text'].lower() for item in user_schedules['study']])
            
            if '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞' in study_text or '–º–∞—Ç–µ–º' in study_text:
                analysis += "üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!\n"
            if '—Ñ–∏–∑–∏–∫–∞' in study_text:
                analysis += "‚ö° –§–∏–∑–∏–∫–∞ - –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ–æ—Ä–º—É–ª—ã!\n"
            if '—Ö–∏–º–∏—è' in study_text:
                analysis += "üß™ –•–∏–º–∏—è - –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞?\n"
            if '–∏—Å—Ç–æ—Ä–∏—è' in study_text:
                analysis += "üìö –ò—Å—Ç–æ—Ä–∏—è - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–∞—Ç—ã!\n"
            if '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' in study_text or '–∞–Ω–≥–ª' in study_text:
                analysis += "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π - –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ä–∞–∑–≥–æ–≤–æ—Ä—É!\n"
            
            analysis += "\n"
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if user_schedules['work']:
            work_count = len(user_schedules['work'])
            analysis += f"üíº **–†–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** {work_count} –∑–∞–ø–∏—Å–µ–π\n"
            
            work_text = " ".join([item['text'].lower() for item in user_schedules['work']])
            
            if '–≤—Å—Ç—Ä–µ—á–∞' in work_text:
                analysis += "ü§ù –í—Å—Ç—Ä–µ—á–∏ - –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é!\n"
            if '–¥–µ–¥–ª–∞–π–Ω' in work_text or 'deadline' in work_text:
                analysis += "‚è∞ –î–µ–¥–ª–∞–π–Ω—ã - –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –Ω–∞ –ø–æ—Ç–æ–º!\n"
            if '–∑–≤–æ–Ω–æ–∫' in work_text:
                analysis += "üìû –ó–≤–æ–Ω–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤—è–∑—å!\n"
            
            analysis += "\n"
        
        # –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã
        total_items = len(user_schedules['study']) + len(user_schedules['work'])
        if total_items > 10:
            analysis += "‚ö†Ô∏è **–°–æ–≤–µ—Ç:** –£ –≤–∞—Å –º–Ω–æ–≥–æ –∑–∞–¥–∞—á! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å.\n"
        elif total_items < 3:
            analysis += "üí° **–°–æ–≤–µ—Ç:** –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        else:
            analysis += "‚úÖ **–°–æ–≤–µ—Ç:** –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –∑–∞–¥–∞—á! –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–º–ø.\n"
        
        return analysis

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_manager = ScheduleManager()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(BOT_TOKEN)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìö –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω–æ–µ", callback_data="add_study"),
        InlineKeyboardButton("üíº –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ", callback_data="add_work")
    )
    keyboard.add(
        InlineKeyboardButton("üìä –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", callback_data="my_schedules"),
        InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑", callback_data="analyze")
    )
    keyboard.add(
        InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="voice_input"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    )
    return keyboard

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" """
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! üóìÔ∏è

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ üìö –î–æ–±–∞–≤–ª—è—Ç—å —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üíº –î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ  
‚Ä¢ üé§ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üí° –î–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    bot.reply_to(message, welcome_text, reply_markup=get_main_keyboard())
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@bot.message_handler(commands=['help'])
def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1. **üìö –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω–æ–µ** - –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä, –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –≤—Ä–µ–º–µ–Ω–∏
2. **üíº –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ** - –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏, –¥–µ–¥–ª–∞–π–Ω—ã
3. **üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
4. **üìä –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
5. **üîç –ê–Ω–∞–ª–∏–∑** - –ø–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101"
‚Ä¢ "–í—Ç–æ—Ä–Ω–∏–∫ 14:00 - –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç"
‚Ä¢ "–°—Ä–µ–¥–∞ - –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞, —Å–¥–∞—Ç—å –¥–æ 18:00"

–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –≤—Å–µ –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è! ‚è∞
"""
    
    bot.reply_to(message, help_text, reply_markup=get_back_keyboard())

@bot.message_handler(commands=['ping'])
def cmd_ping(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    bot.reply_to(message, "üèì pong")
    logger.info(f"üèì –ü–∏–Ω–≥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['voice'])
def process_voice(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ speech-to-text
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º
    
    bot.reply_to(
        message,
        "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=get_main_keyboard()
    )
    
    logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: True)
def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    if user_id in user_states:
        state = user_states[user_id]
        
        if state == 'waiting_for_study':
            result = schedule_manager.add_study_schedule(user_id, message.text)
            bot.reply_to(message, result, reply_markup=get_main_keyboard())
            del user_states[user_id]
            logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            
        elif state == 'waiting_for_work':
            result = schedule_manager.add_work_schedule(user_id, message.text)
            bot.reply_to(message, result, reply_markup=get_main_keyboard())
            del user_states[user_id]
            logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            
        else:
            del user_states[user_id]
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def process_callback(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = call.from_user.id
    data = call.data
    
    bot.answer_callback_query(call.id)
    
    if data == "add_study":
        user_states[user_id] = 'waiting_for_study'
        bot.edit_message_text(
            "üìö **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            "‚Ä¢ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
            "‚Ä¢ –í—Ä–µ–º—è\n"
            "‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç\n"
            "‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101'",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    elif data == "add_work":
        user_states[user_id] = 'waiting_for_work'
        bot.edit_message_text(
            "üíº **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            "‚Ä¢ –ó–∞–¥–∞—á–∏\n"
            "‚Ä¢ –í—Å—Ç—Ä–µ—á–∏\n"
            "‚Ä¢ –î–µ–¥–ª–∞–π–Ω—ã\n"
            "‚Ä¢ –í—Ä–µ–º—è\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–í—Ç–æ—Ä–Ω–∏–∫ 14:00 - –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç'",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    elif data == "my_schedules":
        user_schedules = schedule_manager.get_user_schedules(user_id)
        
        if not user_schedules['study'] and not user_schedules['work']:
            bot.edit_message_text(
                "üìù **–í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_back_keyboard()
            )
        else:
            schedules_text = "üìä **–í–∞—à–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:**\n\n"
            
            if user_schedules['study']:
                schedules_text += "üìö **–£—á–µ–±–Ω–æ–µ:**\n"
                for item in user_schedules['study']:
                    schedules_text += f"‚Ä¢ ID {item['id']}: {item['text']}\n"
                schedules_text += "\n"
            
            if user_schedules['work']:
                schedules_text += "üíº **–†–∞–±–æ—á–µ–µ:**\n"
                for item in user_schedules['work']:
                    schedules_text += f"‚Ä¢ ID {item['id']}: {item['text']}\n"
            
            bot.edit_message_text(
                schedules_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=get_back_keyboard()
            )
        
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    elif data == "analyze":
        analysis = schedule_manager.analyze_schedule(user_id)
        bot.edit_message_text(
            analysis,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    
    elif data == "voice_input":
        bot.edit_message_text(
            "üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
            "–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å, –Ω–æ –≤ –±—É–¥—É—â–µ–º —ç—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
        logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")
    
    elif data == "help":
        help_text = """
‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**

1. **üìö –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–±–Ω–æ–µ** - –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä, –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –≤—Ä–µ–º–µ–Ω–∏
2. **üíº –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á–µ–µ** - –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏, –¥–µ–¥–ª–∞–π–Ω—ã
3. **üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ** - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
4. **üìä –ú–æ–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è** - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
5. **üîç –ê–Ω–∞–ª–∏–∑** - –ø–æ–ª—É—á–∞–π—Ç–µ —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –∞—É–¥–∏—Ç–æ—Ä–∏—è 101"
‚Ä¢ "–í—Ç–æ—Ä–Ω–∏–∫ 14:00 - –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç"
‚Ä¢ "–°—Ä–µ–¥–∞ - –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞, —Å–¥–∞—Ç—å –¥–æ 18:00"

–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –≤—Å–µ –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è! ‚è∞
"""
        bot.edit_message_text(
            help_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_back_keyboard()
        )
    
    elif data == "back_to_main":
        bot.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=get_main_keyboard()
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Render.com
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.info("üåê Flask –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        bot.stop_polling()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
