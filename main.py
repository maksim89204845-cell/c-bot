import os
import logging
import asyncio
import threading
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask
from schedule_parser import ScheduleParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
schedule_parser = ScheduleParser("https://drive.google.com/file/d/152JZ6IMxa07Z1oIjzv7NLhm1LhQUynzP/view?usp=sharing")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today"),
            InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow")
        ],
        [
            InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="schedule_week"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="update_schedule")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"),
            InlineKeyboardButton(text="üèì –ü–∏–Ω–≥", callback_data="ping")
        ]
    ])
    return keyboard

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        welcome_text = (
            "üéì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã 302 –§!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
        )
        
        await message.answer(
            welcome_text,
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        logging.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping
@dp.message(Command("ping"))
async def cmd_ping(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ping"""
    try:
        await message.answer("üèì –ü–æ–Ω–≥! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        logging.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /ping –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /ping: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
    try:
        today = datetime.now().strftime('%d.%m.%Y')
        schedule = schedule_parser.get_schedule_for_date(today)
        
        if schedule and any(lesson.get('subject') for lesson in schedule.values()):
            message_text = schedule_parser.format_schedule_message(schedule, today)
            await message.answer(message_text, reply_markup=get_back_keyboard())
        else:
            await message.answer(
                "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.",
                reply_markup=get_back_keyboard()
            )
        logging.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /schedule –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /schedule: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=get_back_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule_tomorrow
@dp.message(Command("schedule_tomorrow"))
async def cmd_schedule_tomorrow(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule_tomorrow"""
    try:
        schedule = schedule_parser.get_schedule_for_tomorrow()
        
        if schedule and any(lesson.get('subject') for lesson in schedule.values()):
            tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
            message_text = schedule_parser.format_schedule_message(schedule, tomorrow)
            await message.answer(message_text, reply_markup=get_back_keyboard())
        else:
            await message.answer(
                "üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.",
                reply_markup=get_back_keyboard()
            )
        logging.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /schedule_tomorrow –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /schedule_tomorrow: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=get_back_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule_week
@dp.message(Command("schedule_week"))
async def cmd_schedule_week(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule_week"""
    try:
        logging.info("=== –ù–ê–ß–ê–õ–û –ö–û–ú–ê–ù–î–´ /schedule_week ===")
        
        schedule = schedule_parser.get_schedule_for_week()
        logging.info(f"–í—ã–∑—ã–≤–∞—é get_schedule_for_week()...")
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        has_lessons = False
        total_lessons = 0
        for day_schedule in schedule.values():
            day_lessons = len([lesson for lesson in day_schedule.values() if lesson.get('subject')])
            total_lessons += day_lessons
            if day_lessons > 0:
                has_lessons = True
        
        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: has_lessons={has_lessons}, total_lessons={total_lessons}")
        
        if schedule and has_lessons:
            logging.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
            messages = schedule_parser.format_week_schedule_messages(schedule)
            logging.info(f"–°–æ–∑–¥–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages}")
            
            if messages and len(messages) > 0:
                for i, msg in enumerate(messages, 1):
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ {i} –∏–∑ {len(messages)}")
                    await message.answer(msg, reply_markup=get_back_keyboard())
                    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    if i < len(messages):
                        await asyncio.sleep(0.5)
            else:
                await message.answer(
                    "üìÖ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.",
                    reply_markup=get_back_keyboard()
                )
        else:
            await message.answer(
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.",
                reply_markup=get_back_keyboard()
            )
        
        logging.info("=== –ö–û–ù–ï–¶ –ö–û–ú–ê–ù–î–´ /schedule_week ===")
        logging.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /schedule_week –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /schedule_week: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=get_back_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_schedule
@dp.message(Command("update_schedule"))
async def cmd_update_schedule(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_schedule"""
    try:
        await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        
        success = schedule_parser.update_schedule()
        if success:
            total_lessons = sum(len(day_schedule) for day_schedule in schedule_parser.schedule_data.values())
            has_lessons = any(lesson.get('subject') for day_schedule in schedule_parser.schedule_data.values() 
                            for lesson in day_schedule.values())
            
            if has_lessons:
                await message.answer(
                    f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n"
                    f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {total_lessons}",
                    reply_markup=get_main_keyboard()
                )
            else:
                await message.answer(
                    "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ —É—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ.",
                    reply_markup=get_main_keyboard()
                )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        
        logging.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /update_schedule –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /update_schedule: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def process_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        
        if callback.data == "schedule_today":
            today = datetime.now().strftime('%d.%m.%Y')
            schedule = schedule_parser.get_schedule_for_date(today)
            
            if schedule and any(lesson.get('subject') for lesson in schedule.values()):
                message_text = schedule_parser.format_schedule_message(schedule, today)
                await callback.message.edit_text(message_text, reply_markup=get_back_keyboard())
            else:
                await callback.message.edit_text(
                    "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.",
                    reply_markup=get_back_keyboard()
                )
        
        elif callback.data == "schedule_tomorrow":
            schedule = schedule_parser.get_schedule_for_tomorrow()
            
            if schedule and any(lesson.get('subject') for lesson in schedule.values()):
                tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
                message_text = schedule_parser.format_schedule_message(schedule, tomorrow)
                await callback.message.edit_text(message_text, reply_markup=get_back_keyboard())
            else:
                await callback.message.edit_text(
                    "üìÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.",
                    reply_markup=get_back_keyboard()
                )
        
        elif callback.data == "schedule_week":
            schedule = schedule_parser.get_schedule_for_week()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            has_lessons = False
            total_lessons = 0
            for day_schedule in schedule.values():
                day_lessons = len([lesson for lesson in day_schedule.values() if lesson.get('subject')])
                total_lessons += day_lessons
                if day_lessons > 0:
                    has_lessons = True
            
            logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è callback: has_lessons={has_lessons}, total_lessons={total_lessons}")
            
            if schedule and has_lessons:
                messages = schedule_parser.format_week_schedule_messages(schedule)
                logging.info(f"–°–æ–∑–¥–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è callback")
                logging.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages}")
                
                if messages and len(messages) > 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Ç–µ–∫—É—â–µ–µ
                    await callback.message.edit_text(messages[0], reply_markup=get_back_keyboard())
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–æ–≤—ã–µ
                    for msg in messages[1:]:
                        await callback.message.answer(msg, reply_markup=get_back_keyboard())
                        await asyncio.sleep(0.5)
                else:
                    await callback.message.edit_text(
                        "üìÖ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.",
                        reply_markup=get_back_keyboard()
                    )
            else:
                await callback.message.edit_text(
                    "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.",
                    reply_markup=get_back_keyboard()
                )
        
        elif callback.data == "update_schedule":
            await callback.message.edit_text("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
            
            success = schedule_parser.update_schedule()
            if success:
                total_lessons = sum(len(day_schedule) for day_schedule in schedule_parser.schedule_data.values())
                has_lessons = any(lesson.get('subject') for day_schedule in schedule_parser.schedule_data.values() 
                                for lesson in day_schedule.values())
                
                if has_lessons:
                    await callback.message.edit_text(
                        f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n"
                        f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {total_lessons}",
                        reply_markup=get_main_keyboard()
                    )
                else:
                    await callback.message.edit_text(
                        "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ —É—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ.",
                        reply_markup=get_main_keyboard()
                    )
            else:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_keyboard()
                )
        
        elif callback.data == "help":
            help_text = (
                "üéì **–ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã 302 –§**\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
                "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                "üèì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n"
                "**–ö–æ–º–∞–Ω–¥—ã:**\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "**–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:**\n"
                "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ Google Drive"
            )
            await callback.message.edit_text(help_text, reply_markup=get_back_keyboard(), parse_mode="Markdown")
        
        elif callback.data == "ping":
            await callback.message.edit_text("üèì –ü–æ–Ω–≥! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.", reply_markup=get_back_keyboard())
        
        elif callback.data == "back_to_main":
            welcome_text = (
                "üéì **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã 302 –§!**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:"
            )
            await callback.message.edit_text(welcome_text, reply_markup=get_main_keyboard(), parse_mode="Markdown")
        
        logging.info(f"‚úÖ Callback {callback.data} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {callback.data}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render.com
app = Flask(__name__)

@app.route('/')
def home():
    return "CRBot —Ä–∞–±–æ—Ç–∞–µ—Ç! ü§ñ"

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 10000)))

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    try:
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()
        logging.info("üåê Flask –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        
        logging.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
