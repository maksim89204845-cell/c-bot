import requests
import PyPDF2
import io
import re
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional

class ScheduleParser:
    def __init__(self, google_drive_url: str):
        self.google_drive_url = google_drive_url
        self.schedule_data = {}
        self.last_update = None
        
    def download_pdf(self) -> Optional[bytes]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç PDF —Å Google Drive"""
        try:
            logging.info("–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF...")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            file_id = self.google_drive_url.split('/d/')[1].split('/')[0]
            direct_url = f"https://drive.google.com/uc?export=download&id={file_id}"
            
            logging.info(f"–°–∫–∞—á–∏–≤–∞—é —Å URL: {direct_url}")
            
            response = requests.get(direct_url, timeout=30)
            response.raise_for_status()
            
            logging.info(f"PDF —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
            return response.content
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF: {e}")
            return None
    
    def extract_text_from_pdf(self, pdf_content: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä—É–ø–ø–æ–π 302 –§"""
        try:
            pdf_file = io.BytesIO(pdf_content)
            reader = PyPDF2.PdfReader(pdf_file)
            
            logging.info(f"PDF —Å–æ–¥–µ—Ä–∂–∏—Ç {len(reader.pages)} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä—É–ø–ø–æ–π 302 –§ (—Å –ø—Ä–æ–±–µ–ª–æ–º!)
            target_page = None
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                page_text = page.extract_text()
                
                logging.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –∏—â—É –≥—Ä—É–ø–ø—É 302 –§...")
                
                if "302 –§" in page_text:
                    logging.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ 302 –§ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}")
                    target_page = page_num
                    break
                else:
                    logging.info(f"‚ùå –ì—Ä—É–ø–ø–∞ 302 –§ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}")
            
            if target_page is None:
                logging.error("‚ùå –ì—Ä—É–ø–ø–∞ 302 –§ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")
                return ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page = reader.pages[target_page]
            text = page.extract_text()
            
            logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {target_page + 1}, –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logging.info(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {text[:500]}")
            
            return text
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {str(e)}")
            return ""
    
    def parse_schedule(self, text: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PDF"""
        schedule = {}
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logging.info(f"=== –û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê ===")
        logging.info(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")
        logging.info(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {text[:500]}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = text.split('\n')
        logging.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        current_date = None
        current_main_time = None
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
                
            logging.info(f"=== –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–æ–∫—É {i+1}: '{line}' ===")
            
            # –ò—â–µ–º –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY)
            date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', line)
            if date_match:
                current_date = date_match.group(1)
                schedule[current_date] = {}
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {current_date}")
                continue
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: HH:MM - HH:MM)
            main_time_match = re.search(r'(\d{2}):(\d{2})\s*-\s*(\d{2}):(\d{2})', line)
            if main_time_match:
                start_hour, start_min, end_hour, end_min = main_time_match.groups()
                current_main_time = f"{start_hour}:{start_min}-{end_hour}:{end_min}"
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è: {current_main_time}")
                continue
            
            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —É—Ä–æ–∫–µ (—Ñ–æ—Ä–º–∞—Ç: HH-MM) - —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!
            lesson_time_match = re.search(r'(\d{2})-(\d{2})', line)
            if lesson_time_match:
                hour, minute = lesson_time_match.groups()
                lesson_time = f"{hour}:{minute}"
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤ —É—Ä–æ–∫–µ: {lesson_time}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é
                if not current_date:
                    # –ò—â–µ–º –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    for j in range(1, 10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 10 —Å—Ç—Ä–æ–∫
                        if i + j < len(lines):
                            next_line = lines[i + j].strip()
                            date_in_next = re.search(r'(\d{2}\.\d{2}\.\d{4})', next_line)
                            if date_in_next:
                                current_date = date_in_next.group(1)
                                if current_date not in schedule:
                                    schedule[current_date] = {}
                                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö: {current_date}")
                                break
                    
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                    if not current_date and schedule:
                        current_date = list(schedule.keys())[0]
                        logging.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É: {current_date}")
                    elif not current_date:
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∞—Ç—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
                        current_date = "01.09.2025"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        schedule[current_date] = {}
                        logging.info(f"üîç –°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∞—Ç—É: {current_date}")
                
                # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞—Ç–∞, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                if current_date:
                    if lesson_time not in schedule[current_date]:
                        schedule[current_date][lesson_time] = {
                            'subject': '',
                            'instructor': '',
                            'auditorium': ''
                        }
                        logging.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {lesson_time}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç (—É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –Ω–∞—á–∞–ª–∞)
                    subject = line.replace(f"{hour}-{minute}", "").strip()
                    schedule[current_date][lesson_time]['subject'] = subject
                    logging.info(f"üìö –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: '{subject}'")
                    
                    # –°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2 —Å—Ç—Ä–æ–∫–∏
                    for j in range(1, 3):
                        if i + j < len(lines):
                            next_line = lines[i + j].strip()
                            logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–æ–∫—É {i+j+1}: '{next_line}'")
                            
                            if next_line and not re.search(r'\d{2}:\d{2}', next_line) and not re.search(r'\d{2}\.\d{2}\.\d{4}', next_line):
                                # –≠—Ç–æ –ª–∏–±–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –ª–∏–±–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è
                                if not schedule[current_date][lesson_time]['instructor']:
                                    schedule[current_date][lesson_time]['instructor'] = next_line
                                    logging.info(f"üë®‚Äçüè´ –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: '{next_line}'")
                                elif not schedule[current_date][lesson_time]['auditorium']:
                                    schedule[current_date][lesson_time]['auditorium'] = next_line
                                    logging.info(f"üè¢ –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: '{next_line}'")
                                    break
                            else:
                                logging.info(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i+j+1} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è/–∞—É–¥–∏—Ç–æ—Ä–∏–∏")
                        else:
                            logging.info(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i+j+1} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã")
                
                continue
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —É—Ä–æ–∫–µ, –Ω–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞
            if current_date and current_main_time and '302' in line and not re.search(r'\d{2}-\d{2}', line):
                # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ç–æ–∫–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤ —É—Ä–æ–∫–µ
                logging.info(f"üîÑ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å 302 –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏: {line}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                if current_main_time not in schedule[current_date]:
                    schedule[current_date][current_main_time] = {
                        'subject': '',
                        'instructor': '',
                        'auditorium': ''
                    }
                    logging.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ {current_main_time}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                subject = line.replace('302', '').strip()
                schedule[current_date][current_main_time]['subject'] = subject
                logging.info(f"üìö –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç (–ø–æ—Ç–æ–∫–æ–≤—ã–π): '{subject}'")
                
                # –°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è
                for j in range(1, 3):
                    if i + j < len(lines):
                        next_line = lines[i + j].strip()
                        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–æ–∫—É {i+j+1} –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ: '{next_line}'")
                        
                        if next_line and not re.search(r'\d{2}:\d{2}', next_line) and not re.search(r'\d{2}\.\d{2}\.\d{4}', next_line):
                            if not schedule[current_date][current_main_time]['instructor']:
                                schedule[current_date][current_main_time]['instructor'] = next_line
                                logging.info(f"üë®‚Äçüè´ –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (–ø–æ—Ç–æ–∫–æ–≤—ã–π): '{next_line}'")
                            elif not schedule[current_date][current_main_time]['auditorium']:
                                schedule[current_date][current_main_time]['auditorium'] = next_line
                                logging.info(f"üè¢ –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è (–ø–æ—Ç–æ–∫–æ–≤—ã–π): '{next_line}'")
                                break
                        else:
                            logging.info(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i+j+1} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ")
                    else:
                        logging.info(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i+j+1} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ")
        
        logging.info(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}")
        logging.info(f"=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===")
        return schedule
    
    def get_schedule_for_date(self, target_date: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if not self.schedule_data:
            self.update_schedule()
        
        return self.schedule_data.get(target_date, {})
    
    def get_schedule_for_tomorrow(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
        return self.get_schedule_for_date(tomorrow)
    
    def get_schedule_for_week(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        if not self.schedule_data:
            self.update_schedule()
        
        return self.schedule_data
    
    def update_schedule(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        try:
            pdf_content = self.download_pdf()
            if pdf_content:
                text = self.extract_text_from_pdf(pdf_content)
                self.schedule_data = self.parse_schedule(text)
                self.last_update = datetime.now()
                return True
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return False
    
    def format_schedule_message(self, schedule: Dict, date: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        if not schedule:
            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."
        
        if date:
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
            message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n\n"
            for time, lesson in schedule.items():
                if lesson.get('subject'):
                    message += f"üïê {time}\n"
                    message += f"üìö {lesson['subject']}\n"
                    message += f"üë®‚Äçüè´ {lesson['instructor']}\n"
                    message += f"üè¢ {lesson['auditorium']}\n"
                    message += "‚îÄ" * 30 + "\n"
                else:
                    message += f"üïê {time} - –ê—É–¥–∏—Ç.\n"
                    message += "‚îÄ" * 30 + "\n"
        else:
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
            message = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
            for date, day_schedule in schedule.items():
                message += f"üìÜ {date}\n"
                for time, lesson in day_schedule.items():
                    if lesson.get('subject'):
                        message += f"üïê {time} - {lesson['subject']} ({lesson['instructor']}, {lesson['auditorium']})\n"
                    else:
                        message += f"üïê {time} - –ê—É–¥–∏—Ç.\n"
                message += "‚îÄ" * 30 + "\n"
        
        if self.last_update:
            message += f"\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.last_update.strftime('%d.%m.%Y %H:%M')}"
        
        return message
    
    def split_long_message(self, message: str, max_length: int = 4000) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(message) <= max_length:
            return [message]
        
        parts = []
        lines = message.split('\n')
        current_part = ""
        
        for line in lines:
            if len(current_part + line + '\n') > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = line + '\n'
                else:
                    # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
                    parts.append(line[:max_length-3] + "...")
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts
    
    def format_week_schedule_messages(self, schedule: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not schedule:
            return ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        messages = []
        
        for date, day_schedule in schedule.items():
            day_message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n\n"
            
            for time, lesson in day_schedule.items():
                if lesson.get('subject'):
                    day_message += f"üïê {time}\n"
                    day_message += f"üìö {lesson['subject']}\n"
                    day_message += f"üë®‚Äçüè´ {lesson['instructor']}\n"
                    day_message += f"üè¢ {lesson['auditorium']}\n"
                    day_message += "‚îÄ" * 30 + "\n"
                else:
                    day_message += f"üïê {time} - –ê—É–¥–∏—Ç.\n"
                    day_message += "‚îÄ" * 30 + "\n"
            
            if self.last_update:
                day_message += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.last_update.strftime('%d.%m.%Y %H:%M')}"
            
            messages.append(day_message)
        
        return messages
