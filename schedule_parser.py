import requests
import PyPDF2
import io
import re
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional

class ScheduleParser:
    def __init__(self, google_drive_url: str):
        self.google_drive_url = google_drive_url
        self.schedule_data = {}
        self.last_update = None
        
    def download_pdf(self) -> Optional[bytes]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç PDF —Å Google Drive"""
        try:
            logging.info("–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF...")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if '/d/' not in self.google_drive_url:
                logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Google Drive URL")
                return None
                
            file_id = self.google_drive_url.split('/d/')[1].split('/')[0]
            direct_url = f"https://drive.google.com/uc?export=download&id={file_id}"
            
            logging.info(f"–°–∫–∞—á–∏–≤–∞—é —Å URL: {direct_url}")
            
            response = requests.get(direct_url, timeout=30)
            response.raise_for_status()
            
            logging.info(f"PDF —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
            return response.content
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF: {e}")
            return None
    
    def extract_text_from_pdf(self, pdf_content: bytes) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä—É–ø–ø–æ–π 302 –§"""
        try:
            pdf_file = io.BytesIO(pdf_content)
            reader = PyPDF2.PdfReader(pdf_file)
            
            logging.info(f"PDF —Å–æ–¥–µ—Ä–∂–∏—Ç {len(reader.pages)} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥—Ä—É–ø–ø–æ–π 302 –§ (—Å –ø—Ä–æ–±–µ–ª–æ–º!)
            target_page = None
            for page_num in range(len(reader.pages)):
                page = reader.pages[page_num]
                page_text = page.extract_text()
                
                logging.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –∏—â—É –≥—Ä—É–ø–ø—É 302 –§...")
                
                if "302 –§" in page_text:
                    logging.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ 302 –§ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}")
                    target_page = page_num
                    break
                else:
                    logging.info(f"‚ùå –ì—Ä—É–ø–ø–∞ 302 –§ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}")
            
            if target_page is None:
                logging.error("‚ùå –ì—Ä—É–ø–ø–∞ 302 –§ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!")
                return ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page = reader.pages[target_page]
            text = page.extract_text()
            
            logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {target_page + 1}, –¥–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logging.info(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {text[:500]}")
            
            return text
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {str(e)}")
            return ""
    
    def parse_schedule(self, text: str) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π"""
        schedule = {}
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logging.info(f"=== –û–¢–õ–ê–î–ö–ê –ü–ê–†–°–ò–ù–ì–ê ===")
        logging.info(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)}")
        logging.info(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {text[:500]}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = text.split('\n')
        logging.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        current_date = None
        temp_lessons = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–∞—Ç—ã
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
                
            logging.info(f"=== –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–æ–∫—É {i+1}: '{line}' ===")
            
            # –ò—â–µ–º –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY)
            date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', line)
            if date_match:
                new_date = date_match.group(1)
                
                # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É
                if temp_lessons:
                    logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–æ—à—É {len(temp_lessons)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ {new_date}")
                    if new_date not in schedule:
                        schedule[new_date] = {}
                    schedule[new_date].update(temp_lessons)
                    temp_lessons.clear()
                
                current_date = new_date
                if current_date not in schedule:
                    schedule[current_date] = {}
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {current_date}")
                continue
            
            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —É—Ä–æ–∫–µ (—Ñ–æ—Ä–º–∞—Ç: HH-MM) - —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!
            lesson_time_match = re.search(r'(\d{2})-(\d{2})', line)
            if lesson_time_match:
                hour, minute = lesson_time_match.groups()
                lesson_time = f"{hour}:{minute}"
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –≤ —É—Ä–æ–∫–µ: {lesson_time}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã 302 –§ –∏–∑ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
                subjects = self._extract_subjects_for_302f(line)
                
                # –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                instructor_auditorium = self._extract_instructor_auditorium(lines, i+1)
                
                lesson_data = {
                    'subject': subjects,
                    'instructor': instructor_auditorium.get('instructor', ''),
                    'auditorium': instructor_auditorium.get('auditorium', '')
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                if subjects and subjects.strip():
                    if current_date and current_date in schedule:
                        if lesson_time not in schedule[current_date]:
                            schedule[current_date][lesson_time] = lesson_data
                            logging.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {lesson_time} –≤ –¥–∞—Ç–µ {current_date}")
                        else:
                            logging.info(f"‚ö†Ô∏è –í—Ä–µ–º—è {lesson_time} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞—Ç–µ {current_date}")
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
                        temp_lessons[lesson_time] = lesson_data
                        logging.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {lesson_time}")
                else:
                    logging.info(f"‚ö†Ô∏è –ü—Ä–µ–¥–º–µ—Ç –ø—É—Å—Ç–æ–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {lesson_time}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                
                continue
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: HH:MM - HH:MM)
            main_time_match = re.search(r'(\d{2}):(\d{2})\s*-\s*(\d{2}):(\d{2})', line)
            if main_time_match:
                start_hour, start_min, end_hour, end_min = main_time_match.groups()
                current_main_time = f"{start_hour}:{start_min}-{end_hour}:{end_min}"
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è: {current_main_time}")
                continue
        
        # –í –∫–æ–Ω—Ü–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –Ω–∞ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É
        if temp_lessons and schedule:
            first_date = list(schedule.keys())[0]
            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–æ—à—É {len(temp_lessons)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ {first_date}")
            if first_date not in schedule:
                schedule[first_date] = {}
            schedule[first_date].update(temp_lessons)
        elif temp_lessons and not schedule:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç –≤–æ–æ–±—â–µ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∞—Ç—É
            temp_date = "01.09.2025"
            schedule[temp_date] = temp_lessons
            logging.info(f"üîÑ –°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∞—Ç—É {temp_date} –¥–ª—è {len(temp_lessons)} —É—Ä–æ–∫–æ–≤")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        for date in schedule:
            schedule[date] = dict(sorted(schedule[date].items(), key=lambda x: x[0]))
            logging.info(f"üìÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è {date}: {list(schedule[date].keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        total_lessons = sum(len(day_schedule) for day_schedule in schedule.values())
        logging.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {total_lessons}")
        
        logging.info(f"üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}")
        logging.info(f"=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===")
        return schedule
    
    def _extract_subjects_for_302f(self, line: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã 302 –§ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        line = re.sub(r'^\d{2}-\d{2}\s*', '', line)
        
        # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã 302 –§ (–ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        if '302 –§' in line:
            # –ë–µ—Ä–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "302 –§"
            parts = line.split('302 –§')
            if len(parts) > 1:
                subject_part = parts[1].strip()
                # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä)
                subject_part = re.sub(r'\d+\s+(?:–°–æ–≤–µ—Ç—Å–∫–∞—è|–ü–æ–ª–µ—Å—Å–∫–∞—è|–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞)', '', subject_part)
                subject_part = re.sub(r'–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª', '', subject_part)
                subject_part = re.sub(r'\s+', ' ', subject_part).strip()
                logging.info(f"üìö –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è 302 –§: '{subject_part}'")
                return subject_part
        
        # –ï—Å–ª–∏ "302 –§" –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å "301 –§", –±–µ—Ä–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å
        if '301 –§' in line:
            parts = line.split('301 –§')
            if len(parts) > 1:
                # –ë–µ—Ä–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –∏ –∏—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è 302 –§
                right_part = parts[1].strip()
                # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
                right_part = re.sub(r'\d+\s+(?:–°–æ–≤–µ—Ç—Å–∫–∞—è|–ü–æ–ª–µ—Å—Å–∫–∞—è|–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞)', '', right_part)
                right_part = re.sub(r'–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª', '', right_part)
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
                right_part = re.sub(r'\d{2}-\d{2}', '', right_part)
                right_part = re.sub(r'\d{2}:\d{2}\s*-\s*\d{2}:\d{2}', '', right_part)
                right_part = re.sub(r'\s+', ' ', right_part).strip()
                logging.info(f"üìö –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏: '{right_part}'")
                return right_part
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        line = re.sub(r'\d+\s+(?:–°–æ–≤–µ—Ç—Å–∫–∞—è|–ü–æ–ª–µ—Å—Å–∫–∞—è|–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞)', '', line)
        line = re.sub(r'–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª', '', line)
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
        line = re.sub(r'\d{2}-\d{2}', '', line)
        line = re.sub(r'\d{2}:\d{2}\s*-\s*\d{2}:\d{2}', '', line)
        line = re.sub(r'\s+', ' ', line).strip()
        
        logging.info(f"üìö –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: '{line}'")
        return line
    
    def _extract_instructor_auditorium(self, lines: List[str], start_line: int) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫"""
        result = {'instructor': '', 'auditorium': ''}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 2 —Å—Ç—Ä–æ–∫–∏
        for i in range(start_line, min(start_line + 2, len(lines))):
            line = lines[i].strip()
            if not line:
                continue
                
            logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–æ–∫—É {i+1}: '{line}'")
            
            # –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è –ò.–û.")
            instructor_match = re.search(r'([–ê-–Ø][–∞-—è]+\s+[–ê-–Ø]\.[–ê-–Ø]\.)', line)
            if instructor_match and not result['instructor']:
                result['instructor'] = instructor_match.group(1)
                logging.info(f"üë®‚Äçüè´ –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: '{result['instructor']}'")
                continue
            
            # –ü–æ–∏—Å–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            auditorium_match = re.search(r'(?:–ê—É–¥–∏—Ç\.\s*)?(\d+\s+(?:–°–æ–≤–µ—Ç—Å–∫–∞—è|–ü–æ–ª–µ—Å—Å–∫–∞—è|–õ–æ–º–æ–Ω–æ—Å–æ–≤–∞)|–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª)', line)
            if auditorium_match and not result['auditorium']:
                result['auditorium'] = auditorium_match.group(1)
                logging.info(f"üè¢ –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: '{result['auditorium']}'")
                continue
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è/–∞—É–¥–∏—Ç–æ—Ä–∏–∏
            if not instructor_match and not auditorium_match:
                logging.info(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i+1} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è/–∞—É–¥–∏—Ç–æ—Ä–∏–∏")
        
        return result
    
    def _find_date_in_next_lines(self, lines: List[str], start_line: int, max_lines: int) -> Optional[str]:
        """–ò—â–µ—Ç –¥–∞—Ç—É –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö"""
        for i in range(start_line, min(start_line + max_lines, len(lines))):
            line = lines[i].strip()
            date_match = re.search(r'(\d{2}\.\d{2}\.\d{4})', line)
            if date_match:
                found_date = date_match.group(1)
                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö: {found_date}")
                return found_date
        return None
    
    def get_schedule_for_date(self, target_date: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        if not self.schedule_data:
            self.update_schedule()
        
        return self.schedule_data.get(target_date, {})
    
    def get_schedule_for_tomorrow(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
        return self.get_schedule_for_date(tomorrow)
    
    def get_schedule_for_week(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        if not self.schedule_data:
            self.update_schedule()
        
        return self.schedule_data
    
    def update_schedule(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        try:
            logging.info("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
            pdf_content = self.download_pdf()
            if pdf_content:
                text = self.extract_text_from_pdf(pdf_content)
                if text:
                    self.schedule_data = self.parse_schedule(text)
                    self.last_update = datetime.now()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                    total_lessons = sum(len(day_schedule) for day_schedule in self.schedule_data.values())
                    logging.info(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_lessons}")
                    return True
                else:
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF")
                    return False
            else:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å PDF")
                return False
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return False
    
    def format_schedule_message(self, schedule: Dict, date: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        if not schedule:
            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ."
        
        if date:
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
            message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n\n"
            for time, lesson in schedule.items():
                if lesson.get('subject'):
                    message += f"üïê {time}\n"
                    message += f"üìö {lesson['subject']}\n"
                    if lesson.get('instructor'):
                        message += f"üë®‚Äçüè´ {lesson['instructor']}\n"
                    if lesson.get('auditorium'):
                        message += f"üè¢ {lesson['auditorium']}\n"
                    message += "‚îÄ" * 30 + "\n"
                else:
                    message += f"üïê {time} - –ê—É–¥–∏—Ç.\n"
                    message += "‚îÄ" * 30 + "\n"
        else:
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
            message = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
            for date, day_schedule in schedule.items():
                message += f"üìÜ {date}\n"
                for time, lesson in day_schedule.items():
                    if lesson.get('subject'):
                        message += f"üïê {time} - {lesson['subject']}"
                        if lesson.get('instructor'):
                            message += f" ({lesson['instructor']}"
                            if lesson.get('auditorium'):
                                message += f", {lesson['auditorium']}"
                            message += ")"
                        message += "\n"
                    else:
                        message += f"üïê {time} - –ê—É–¥–∏—Ç.\n"
                message += "‚îÄ" * 30 + "\n"
        
        if self.last_update:
            message += f"\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {self.last_update.strftime('%d.%m.%Y %H:%M')}"
        
        return message
    
    def split_long_message(self, message: str, max_length: int = 4000) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(message) <= max_length:
            return [message]
        
        parts = []
        lines = message.split('\n')
        current_part = ""
        
        for line in lines:
            if len(current_part + line + '\n') > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = line + '\n'
                else:
                    # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
                    parts.append(line[:max_length-3] + "...")
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part.strip())
        
        return parts
    
    def format_week_schedule_messages(self, schedule: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not schedule:
            return ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."]
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        messages = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        sorted_dates = sorted(schedule.keys(), key=lambda x: datetime.strptime(x, '%d.%m.%Y'))
        
        for date in sorted_dates:
            day_schedule = schedule[date]
            
            if not day_schedule:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–Ω–∏
                continue
                
            day_message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date}:\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_times = sorted(day_schedule.keys(), key=lambda x: x)
            
            for time in sorted_times:
                lesson = day_schedule[time]
                if lesson.get('subject'):
                    day_message += f"üïê {time}\n"
                    day_message += f"üìö {lesson['subject']}\n"
                    if lesson.get('instructor'):
                        day_message += f"üë®‚Äçüè´ {lesson['instructor']}\n"
                    if lesson.get('auditorium'):
                        day_message += f"üè¢ {lesson['auditorium']}\n"
                    day_message += "‚îÄ" * 30 + "\n"
                else:
                    day_message += f"üïê {time} - –ê—É–¥–∏—Ç.\n"
                    day_message += "‚îÄ" * 30 + "\n"
            
            if self.last_update:
                day_message += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.last_update.strftime('%d.%m.%Y %H:%M')}"
            
            messages.append(day_message)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not messages:
            return ["üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—Å–µ –¥–Ω–∏ –ø—É—Å—Ç—ã–µ."]
        
        return messages
